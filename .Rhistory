library(devtools)
build_github_devtools()
install.packages("devtools")
library(devtools)
build_github_devtools()
library(RJDBC)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
Sys.setenv(JAVA_HOME='C:\Program Files (x86)\Java\jre1.8.0_66')
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_66')
library(rJava)
install.packages("rJava")
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_66')
library(rJava)
?array2vector
?vector2array
system.time((1:10000000/10))
system.time((1:1000000000/10))
system.time(as.ff(1:1000000000/10))
?apriori
??apriori
?select
??select
cor(matrix(1:4,2),matrix(1:6,3))
cor(matrix(1:4,2),1:6
)
cor(matrix(1:4,2),1:2)
class(cor(matrix(1:4,2),1:2))
cor(1:2,matrix(1:4,2))
l <- list(1:2,1)
l[[2]]
l[2]
l <- list(a=1:2,b=1)
l[["a"]]
length(1:3)
cor(1:3,1:4)
cor(1:3,1:6)
l <- list(a=1:2,b=3:4)
l[["a"]]
l <- list(a=1:2,3:4)
l[["a"]]
names(l)
l[[!"a"]]
paste0("")
paste0(" ")
library(RODBC)
con <- odbcConnect("Gandalf")
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'","","',
AnalysisID);"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'","","',
AnalysisID);"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'","","',
AnalysisID);"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'NULL',
AnalysisID);"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'NULL',
AnalysisID);"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'"," ","',
AnalysisID);"))
a<-" "
a
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'",a,"',
AnalysisID);"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'",a,"',
AnalysisID);"))
paste0("CALL FLWideToDeep('tblAbaloneWide',
+ 'ObsID',
+                      'tblAbaloneDeep',
+                      'ObsID',
+                      'VarID',
+                      'Num_Val',
+                      'Rings',
+                      'SEX(M),DummyCat(D)',
+                      '",a,"',
+                      AnalysisID);")
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'",a,"',
AnalysisID);"))[1,1]
sqlGetResults(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'",a,"',
AnalysisID);"))[1,1]
paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'",a,"',
AnalysisID);")
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'",a,"',
AnalysisID)"))[1,1]
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
'",a,"',
AnalysisID)"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide','ObsID','tblAbaloneDeep','ObsID','VarID','Num_Val','Rings','SEX(M),DummyCat(D)','",a,"',AnalysisID)"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide','ObsID','tblAbaloneDeep','ObsID','VarID','Num_Val','Rings','SEX(M),DummyCat(D)','",a,"',AnalysisID)"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide','ObsID','tblAbaloneDeep','ObsID','VarID','Num_Val','Rings','SEX(M),DummyCat(D)',NULL,AnalysisID)"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide','ObsID','tblAbaloneDeep','ObsID','VarID','Num_Val','Rings','SEX(M),DummyCat(D)',NULL,AnalysisID)"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide','ObsID','tblAbaloneDeep','ObsID','VarID','Num_Val',NULL,NULL,NULL,AnalysisID)"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide','ObsID','tblAbaloneDeep','ObsID','VarID','Num_Val',NULL,NULL,NULL,AnalysisID)"))
sqlQuery(con,paste("select * from tblMatrixMulti where matrix_id=1"))
sqlQuery(con,paste("database FL_DEMO"))
sqlQuery(con,paste("select * from tblMatrixMulti where matrix_id=1"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide','ObsID','tblAbaloneDeep','ObsID','VarID','Num_Val',NULL,NULL,NULL,AnalysisID)"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide','ObsID','tblAbaloneDeep','ObsID','VarID','Num_Val',NULL,NULL,NULL,AnalysisID)"))
sqlQuery(con, paste0("CALL FLWideToDeep('tblAbaloneWide','ObsID','tblAbaloneDeep','ObsID','VarID','Num_Val',NULL,NULL,NULL,AnalysisID)"))
library(RJDBC)
l <- list(a=1)
l[["a"]]
l[["b"]]
is.null(l[["b"]])
setwd("C:/Users/phani/Downloads/AdapteR")
library(RJDBC)
library(testthat)
library(plyr)
library(RODBC)
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
m4 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",5,"Matrix_id","ROW_ID","COL_ID","CELL_VAL") # Symmetric non-singular matrix of dimension 5x5
cor(m,m4)
cor(m4,m4)
m <-
eqnRtn <- FLMatrix(
connection,
database          = "FL_DEMO",
matrix_table      = "finEquityReturns",
matrix_id_value   = "",
matrix_id_colname = "",
row_id_colname    = "TxnDate",
col_id_colname    = "TickerSymbol",
cell_val_colname  = "EquityReturn")
## you can run above functions on m=Equity Returns Example again!
## this is a rather large matrix
dim(eqnRtn)
## with ticker columns and date rows
(randomstocks <- sample(colnames(eqnRtn), 20))
head(dates <- rownames(eqnRtn))
## Inspecting Data is compressed in R with matrix syntax:
dec2006 <- grep("2006-12",dates)
eqnRtn[dec2006, "MSFT"]
E <- eqnRtn[dec2006, randomstocks]
E
randomstocks <- c('AAPL','HPQ','IBM','MSFT','ORCL')
rEqnRtn <- as.matrix(eqnRtn[,randomstocks])
rEqnRtn <- na.omit(rEqnRtn)
rCorr <- cor(
rEqnRtn[,c('AAPL','MSFT')],
rEqnRtn[,c('AAPL','HPQ','IBM','MSFT','ORCL')])
round(rCorr,2)
flCorr <- cor(
eqnRtn[,c('AAPL','MSFT')],
eqnRtn[,randomstocks])
round(flCorr,2)
options(debugSQL = TRUE)
M <- cor(eqnRtn[,randomstocks])
M
devtools::load_all("AdapteR")
flCorr <- cor(
eqnRtn[,c('AAPL','MSFT')],
eqnRtn[,randomstocks])
round(flCorr,2)
cor(
+     eqnRtn[,c('AAPL','MSFT')],
+     eqnRtn[,randomstocks])
cor(eqnRtn[,c('AAPL','MSFT')],eqnRtn[,randomstocks])
M <- cor(eqnRtn[,randomstocks])
M
rCorr <- cor(
rEqnRtn[,c('AAPL','MSFT')],
rEqnRtn[,c('AAPL','HPQ','IBM','MSFT','ORCL')])
round(rCorr,2)
library(RJDBC)
library(teradataR)
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
connection <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
library(RJDBC)
library(teradataR)
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
connection <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
sqlQuery(connection,"CALL FLWideToDeep('tblAbaloneWide',
'ObsID',
'tblAbaloneDeep',
'ObsID',
'VarID',
'Num_Val',
'Rings',
'SEX(M),DummyCat(D)',
NULL,
AnalysisID);")
sqlQuery(connection," drop table tblAbaloneDeep")
sqlSendUpdate(connection," drop table tblAbaloneDeep")
sqlQuery(connection,"CALL FLWideToDeep('tblAbaloneWide','ObsID','tblAbaloneDeep','ObsID','VarID','Num_Val','Rings','SEX(M),DummyCat(D)',NULL,AnalysisID);")
sqlSendUpdate(connection," drop table tblAbaloneDeep")
sqlQuery(connection,"CALL FLWideToDeep('tblAbaloneWide','ObsID','tblAbaloneDeep','ObsID','VarID','Num_Val','Rings','SEX(M),DummyCat(D)',NULL,AnalysisID);")
sqlQuery(connection," CALL FLKMeans('tblUSArrests', 'ObsID', 'VarID', 'Num_Val',NULL, 2, 20, 2,'KMeans, clusters=2, maxiter=20, hypothesis=2', AnalysisID )")
devtools::load_all("AdapteR")
flv
expect_eval_equal <- function(initF,FLcomputationF,RcomputationF,benchmark=FALSE,...)
{
I <- initF(...)
expect_equal(FLcomputationF(I$FL),
RcomputationF(I$R),
check.attributes=FALSE)
}
expect_flequal <- function(a,b,...){
if(is.list(a))
for(i in 1:length(a))
expect_flequal(a[[i]],b[[i]],...)
expect_equal(a,b,...)
}
## Increase n for increasing length of FLVector.
## If isRowVec=TRUE, rowVector(one observation of all columns) is returned.
initF.FLVector <- function(n,isRowVec=FALSE)
{
sqlSendUpdate(connection,
c(paste0("DROP TABLE FL_DEMO.test_vectortable_AdapteR;"),
paste0("CREATE TABLE FL_DEMO.test_vectortable_AdapteR
AS(SELECT 1 AS VECTOR_ID,a.serialval AS VECTOR_INDEX,
CAST(RANDOM(0,100) AS FLOAT)AS VECTOR_VALUE
FROM FL_DEMO.fzzlserial a
WHERE a.serialval < ",ifelse(isRowVec,2,n+1),") WITH DATA ")))
table <- FLTable(connection,
"FL_DEMO",
"test_vectortable_AdapteR",
"VECTOR_INDEX",
whereconditions=paste0("FL_DEMO.test_vectortable_AdapteR.VECTOR_ID = 1")
)
if(isRowVec)
flv <- table[1,base::sample(c("VECTOR_VALUE","VECTOR_INDEX"),n,replace=TRUE)]
else
flv <- table[1:n,"VECTOR_VALUE"]
Rvector <- as.vector(flv)
return(list(FL=flv,R=Rvector))
}
## Increase the value of n to increase the dimensions of FLMatrix returned.
## Returns n*n or n*(n-1) based on isSquare.
initF.FLMatrix <- function(n,isSquare=FALSE)
{
sqlSendUpdate(connection,
c(paste0("DROP TABLE FL_DEMO.test_matrixtable_AdapteR;"),
paste0("CREATE TABLE FL_DEMO.test_matrixtable_AdapteR
AS(SELECT 1 AS MATRIX_ID,a.serialval AS ROW_ID,
b.serialval AS COL_ID,CAST(random(0,100) AS FLOAT)AS CELL_VAL
FROM FL_DEMO.fzzlserial a,FL_DEMO.fzzlserial b
WHERE a.serialval < ",n+1," and b.serialval < ",ifelse(isSquare,n+1,n),") WITH DATA ")))
flm <- FLMatrix(connection,
database          = "FL_DEMO",
matrix_table      = "test_matrixtable_AdapteR",
matrix_id_value   = 1,
matrix_id_colname = "Matrix_ID",
row_id_colname    = "Row_ID",
col_id_colname    = "Col_ID",
cell_val_colname  = "Cell_Val")
Rmatrix <- as.matrix(flm)
return(list(FL=flm,R=Rmatrix))
}
initF.FLTable <- function(rows,cols)
{
WideTable <- FLTable(connection,
"FL_DEMO",
"fzzlserial",
"serialval",
whereconditions=paste0("FL_DEMO.fzzlserial.serialval<100"))
return(WideTable[1:rows,base::sample(c("randval","serialval"),cols,replace=TRUE)])
}
setMethod("expect_equal",signature("FLMatrix","matrix"),
function(object,expected,...) expect_equal(as.matrix(object),expected,...))
setMethod("expect_equal",signature("FLMatrix","FLMatrix"),
function(object,expected,...) expect_equal(as.matrix(object),as.matrix(expected),...))
setMethod("expect_equal",signature("dgCMatrix","FLMatrix"),
function(object,expected,...) expect_equal(object,as.matrix(expected),...))
setMethod("expect_equal",signature("FLVector","vector"),
function(object,expected,...) expect_equal(as.vector(object),expected,...))
setMethod("expect_equal",signature("FLVector","FLVector"),
function(object,expected,...) expect_equal(as.vector(object),as.vector(expected),...))
setMethod("expect_equal",signature("matrix","matrix"),
function(object,expected,...) testthat::expect_equal(as.vector(object),as.vector(expected),...))
setMethod("expect_equal",signature("list","list"),
function(object,expected,...)
llply(names(object),
function(i)
expect_equal(object[[i]],expected[[i]],...)))
flv <- initF.FLVector(5)$FL
flv1 <- initF.FLVector(5,TRUE)$FL
flv
flv1
flv1[2:3]
flv1[4:3]
flv1@dimnames
flv1[4:3]@dimnames
flv <- initF.FLVector(5)$FL
flv
flv[4:3]@dimnames
flv[4:3]
flv[4:8]
flv[4:1]
flv
1:3[4]
1:3[-2]
1:3[-1]
1:3[-3]
any(1:3>4)
any(1:3>2)
test_that("check vector subsetting",
{
## Testing result
expect_eval_equal(initF.FLVector,
function(x) do.call("[",list(x,5:3)),
function(x) do.call("[",list(x,5:3)),n=5)
expect_eval_equal(initF.FLVector,
function(x) do.call("[",list(x)),
function(x) do.call("[",list(x)),n=5)
})
