?FLKMeans
?kmeans
?kmeans.fltable
?kmeans.FLTable
??kmeans.FLTable
?kmeans
?cluster
??cluster
?td.data.frame
??td.data.frame
kmeans(matrix(1:100,1),4)
kmeans(matrix(1:100,1),4,replace=TRUE)
kmeans(matrix(1:100,10),4)
kmeans(matrix(1:100,5),4)
t<-kmeans(matrix(1:100,5),4)
t$cluster
t$centers
?custer
?cluster
??cluster
?kmeans
?system.file
is_number(4)
is.integer(4)
t<-as.integer(4)
is.integer(t)
t<-as.integer(-4.6)
is.integer(t)
t
base::as.integer(-5.6)
base::as.integer(5.6)
is_integer <- function(x) { (x == ceiling(x)||x == floor(x)) }
is_number  <- function(x) { (x == ceiling(x)||x == floor(x))&&(x>=1) }
is_integer(4)
is_integer(4.6)
is_integer(-4.6)
is_number(5.6)
is_number(-5.6)
is_number(-5)
is_number(0.7)
is_number(1.9)
is_number(1)
as.list(environment())
environment()
as.data.frame(environment())
as.vector(environment())
as.numeric(environment())
as.character(environment())
as.list(environment())
?kmeans
c(a=TRUE,b=FALSE)
t<-c(a=TRUE,b=FALSE)
t[a]
t["a"]
t["a"]==TRUE
is.logical(t["a"])
(t["a"])==1
if(t["a"]==TRUE){print("works")}
is.logical(t)
is.numeric(t)
is.vector(t)
library(cluster)
?pam
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(10,0,0.5)),
cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
x
pamx <- pam(x, 2)
pamx
summary(pamx)
?silinfo
??silinfo
pamx@clusinfo
isolation(pamx)
pamx$medoids
pamx$id.med
pamx$clustering
pamx$objective
pamx$isolation
pamx$clusinfo
pamx$silinfo
pamx$diss
?dist
pamx$data
dist(pamx$data[1:2,])
pamx$call
?agnes
data(votes.repub)
agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE)
agn1
plot(agn1)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
colnames(x) <- c("x", "y")
(cl <- kmeans(x, 2,20,2))
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
colnames(x) <- c("x", "y")
(cl <- kmeans(x, 2,20,3))
cl$cluster
cl$centers
cl$iter
?pam
??pam
?cluster
??fuzzykmeans
??fkmeans
?fitted
?kmeans
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
colnames(x) <- c("x", "y")
(cl <- kmeans(x, 2))
plot(x, col = cl$cluster)
points(cl$centers, col = 1:2, pch = 8, cex = 2)
fitted.x <- fitted(cl);  head(fitted.x)
resid.x <- x - fitted(cl)
x
fitted.x <- fitted(cl);fitted.x
kmeans(1:4,2)
kmeans(as.matrix(1:4),2)
m<-matrix(1:3000,30)
which(m==m)
?which
which(m==m,TRUE)
m<-matrix(1:10000,100)
which(m==m,TRUE)
which(m==m,TRUE)[10000,]
m<-matrix(1:1000000,1000)
which(m==m,TRUE)[1000000,]
?Matrix
?pam
??pam
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(10,0,0.5)),
cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
x
pamx <- pam(x, 2)
library(cluster)
pamx <- pam(x, 2)
pamx
pamx$id.med
pamx$objective
pamx$isolation
?objective
??objective
??build
??swap
pamx$clusinfo
pamx$silinfo
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(10,0,0.5)),
cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
pamx <- pam(x, 2)
library(cluster)
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(10,0,0.5)),
cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
pamx <- pam(x, 2)
pamx
pamx$clusinfo
pamx$silinfo
pamx$diss
pamx$call
pamx$data
?lm
?datasets
library(help = "datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
?datasets
?"datasets-package"
exists("sqlQuery")
exists("det")
?UseMethod
length(pasteo("hai","lo"))
length(paste0("hai","lo"))
length(paste0(""))
length(paste0())
length()
length("")
cat("hai","lo")
?dbSendUpdate
??dbSendUpdate
?dbcommit
??dbcommit
?sapply
sapply(1:2,function(x)x*x)
lapply(1:2,function(x)x*x)
lapply(list(1:2,3:4),function(x)x*x)
sapply(list(1:2,3:4),function(x)x*x)
list(matrix_id=1,r_id=2)
is.null("")
is.null(c())
is.null(c(""))
is.null(/0)
is.null(\0)
is.null("\0")
is.null(NULL)
is.null("NULL")
is.null()
?tryCatch
tryCatch(stop("yo"),error=function(x)print("inside error"))
?odbcGetErrMsg
?sqlQuery
connection <- odbcConnect("Gandalf")
connection <- odbcConnect("Gandalf")
t<-sqlQuery(connection,"selectt * from tblMatrixMulti",errors = F)
t
t<-sqlQuery(connection,"select * from tblMatrixMulti",errors = F)
t
t<-sqlQuery(connection,"select * from tbMatrixMulti",errors = F)
t
sqlQuery(connection,"select * from tbMatrixMulti",errors = F)
sqlQuery(connection,"select * from tblMatrixMulti",errors = F)
odbcGetErrMsg(connection)
sqlQuery(connection,"select * from tbMatrixMulti",errors = F)
odbcGetErrMsg(connection)
sqlQuery(connection,"select * from tblMatrixMulti",errors = F)
odbcGetErrMsg(connection)
sqlQuery(connection,"select * from tbMatrixMulti",errors = T)
odbcGetErrMsg(connection)
sqlQuery(connection,"select * from tbMatrixMulti",errors = T)
odbcGetErrMsg(connection)
sqlQuery(connection,"select * from tbMatrixMulti",errors = T)
sqlQuery(connection,"select * from tbMatrixMulti",errors = F)
sqlQuery(connection,"select * from tblMatrixMulti",errors = F)
odbcGetErrMsg(connection)
class(connection)
sqlQuery(connection,"select -1",errors = F)
t<-sqlQuery(connection,"select -1",errors = F)
t
class(t)
t==-1
?sparsematrix
Matrix(matrix(c(1:3,0),2),sparse = T)
t<-Matrix(matrix(c(1:3,0),2),sparse = T)
mdeep<-Matrix::summary(t)
mdeep
nrow(mdeep)
t<-Matrix(matrix(c(1:3,0,0,0,1:3),3),sparse = T)
T
t
t<-Matrix(matrix(c(1:3,0,0,0,1:2,0),3),sparse = T)
mdeep<-Matrix::summary(t)
mdeep
t<-Matrix(matrix(1:4,2),sparse = T)
t
Matrix::summary(t)
?setMethod
install.packages("shiny")
??shiny
?setdiff
setiff(1:2,3:4)
setdiff(1:2,3:4)
a=1
a=1
det(matrix(1:25,5,5))
det(matrix(1:25,5,5))
1:25
matrix(1:25,5,5)
matrix(1:25,5,4)
salary <- c(18700000,14626720,14137500,13980000,12916666)
> position <- c("QB","QB","DE","QB","QB")
> team <- c("Colts","Patriots","Panthers","Bengals","Giants")
> name.last <- c("Manning","Brady","Pepper","Palmer","Manning")name.first <- c("Peyton","Tom","Julius","Carson","Eli")
salary <- c(18700000,14626720,14137500,13980000,12916666)position <- c("QB","QB","DE","QB","QB")
team <- c("Colts","Patriots","Panthers","Bengals","Giants")                      name.last <- c("Manning","Brady","Pepper","Palmer","Manning")                      name.first <- c("Peyton","Tom","Julius","Carson","Eli")
salary <- c(18700000,14626720,14137500,13980000,12916666)
position <- c("QB","QB","DE","QB","QB")
team <- c("Colts","Patriots","Panthers","Bengals","Giants")
name.last <- c("Manning","Brady","Pepper","Palmer","Manning")
name.first <- c("Peyton","Tom","Julius","Carson","Eli")
salary <- c(18700000,14626720,14137500,13980000,12916666)
position <- c("QB","QB","DE","QB","QB")
team <- c("Colts","Patriots","Panthers","Bengals","Giants")
name.last <- c("Manning","Brady","Pepper","Palmer","Manning")
name.first <- c("Peyton","Tom","Julius","Carson","Eli")
top.5.salaries <- data.frame(name.last,name.first,team,position,salary)
edit(top.5.salaries)
save(top.5.salaries,
file="C:Users/STPL/Downloads/top.5.salaries.rda")
save(top.5.salaries,
file="C:Users/STPL/Downloads")
save(top.5.salaries,
file="C:/Users/STPL/Downloads")
save(top.5.salaries,
file="D:/")
save(top.5.salaries,file="~/top.5.salaries.RData")
getwd()
load(~/top.5.salaries)
load("~/top.5.salaries")
load("~/top.5.salaries.RData")
load("~/top.5.salaries.RData")
write.table(top.5.salaries,"~/fromWrite.Table")
write.csv(top.5.salaries,"~/fromWrite.Table")
library(RJDBC)
read.table(top.5.salaries,"~/fromWrite.Table")
read.table(top.5.salaries,"fromWrite.Table")
read.table(top.5.salaries,"fromWrite")
read.table("~/fromWrite.Table")
?gsub
match("A","a")
v<-1:3
as.data.frame(v)
d<-data.frame(a=1:2,b=2:3)
as.vector(d)
is.vector(as.vector(d))
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
setwd("C:/Users/STPL/Downloads/AdapteR")
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
WideTable <- FLTable(connection, "FL_TRAIN", "tblVectorWide","vector_key")
as.data.frame(WideTable)
class(v1)
v1 <- WideTable[,"vector_value"]
class(v1)
v1
v2 <- as.data.frame(v1)
v2
x1 <- WideTable[,c("Vector_value","vector_key")]
class(x1)
x2 <- as.data.frame(x1)
x2
x1 <- WideTable[,c("Vector_key","vector_key")]
class(x1)
x2 <- as.data.frame(x1)
x2
as.data.frame(matrix(1:4,2))
t<-as.data.frame(matrix(1:4,2))
class(t.data.frame())
class(t)
t$V1
temp_m <- matrix(1:6,3)
class(temp_m)
t<-as.data.frame(temp_m)
class(t)
t
as.vector(t)
t1<-as.vector(t)
class(t1)
t
t1<-as.matrix(t)
t1
class(t1)
sparseMatrix(i=1:2,j=1:2,x=1:2)
t<-sparseMatrix(i=1:2,j=1:2,x=1:2)
class(t)
as.matrix.sparseMatrix(t)
as.matrix(t)
as.vector(t)
base::as.vector(t)
base::as.matrix(t)
length(1:3)
size(1:3)
data.frame(a=1:2,b=3:4)
t<-data.frame(a=1:2,b=3:4)
as.matrix(t)
as.matrix(t,1,)
t<-data.frame(a=c("a","b"),b=3:4)
as.matrix(t,1,)
x1 <- WideTable[1:3,c("Vector_value")]
class(x1)
x1
x1@dimnames
as.matrix(1:3)
as.matrix(1:3,2)
as.matrix(1:4,2,2)
nrow(1:3)
FLodbcClose(connection)
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
t<-as.FLMatrix(1:3,connection)
t
t@dimnames
t<-as.FLMatrix(2:3,connection)
t@dimnames
t
as.matrix(c(1:3,0),2,2,sparse=TRUE)
as.Matrix(c(1:3,0),2,2,sparse=TRUE)
Matrix::as.Matrix(c(1:3,0),2,2,sparse=TRUE)
Matrix(c(1:3,0),2,2,sparse = T)
d
Matrix(d,sparse = T)
Matrix(d)
m
Matrix(as.matrix(d))
Matrix(as.matrix(d),sparse = T)
data.frame(a=1:2,b=c(3,0))
d<-data.frame(a=1:2,b=c(3,0))
Matrix(as.matrix(d),sparse = T)
as.vector(Matrix(as.matrix(d),sparse = T))
m5 <- as.FLMatrix(matrix(runif(25,-30,30),5,5),connection)
m5
m5@dimnames
as.data.frame(m5)
devtools::load_all("AdapteR")
as.data.frame(m5)
FLodbcClose(connection)
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
FLodbcClose(connection)
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
m5 <- as.FLMatrix(matrix(runif(25,-30,30),5,5),connection) # Random matrix of dimension 5x5
m5
as.FLMatrix(1:4)
devtools::load_all("AdapteR")
as.FLMatrix(1:4)
as.FLMatrix(1:4,connection)
as.FLMatrix(c(1:4,0),connection)
as.FLMatrix(c(1:4,0),connection,2,2)
as.FLMatrix(c(1:4,0),connection,rows=2,cols=2)
as.FLMatrix(c(1:4,0),connection,rows=2,cols=3)
d
as.FLMatrix(d,connection)
class(d)
devtools::load_all("AdapteR")
as.FLMatrix(d,connection)
d
FLodbcClose(connection)
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
as.FLMatrix(d,connection)
WideTable <- FLTable(connection, "FL_TRAIN", "tblVectorWide","vector_key")
x1 <- WideTable[3:1,c("Vector_value")]
class(x1)
x2 <- as.data.frame(x1)
devtools::load_all("AdapteR")
x2 <- as.data.frame(x1)
x2
x1
x1@dimnames
as.FLMatrix(x1,connection,sparse = T)
d
as.FLMatrix(d,connection)
as.FLMatrix(d,connection)
x1@whereconditions
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
x1 <- WideTable[3:1,c("Vector_value")]
class(x1)
as.FLMatrix.FLVector(x1)
setwd("C:/Users/STPL/Downloads/AdapteR")
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
test_that("check inverse calculation of matrix", {
m4 <- FLMatrix(connection,
database          = "FL_dev",
matrix_table      = "tblMatrixMulti",
matrix_id_value   = "5",
matrix_id_colname = "Matrix_ID",
row_id_colname    = "Row_ID",
col_id_colname    = "Col_ID",
cell_val_colname  = "Cell_Val")
## Symmetric non-singular matrix    m4 <- m2
dim(m4)
s.fl <- solve(m4)
m4.r <- as.matrix(m4)
s.r <- solve(m4.r)
expect_equal(s.r,as.matrix(s.fl))
})
library(testthat)
test_that("check inverse calculation of matrix", {
m4 <- FLMatrix(connection,
database          = "FL_dev",
matrix_table      = "tblMatrixMulti",
matrix_id_value   = "5",
matrix_id_colname = "Matrix_ID",
row_id_colname    = "Row_ID",
col_id_colname    = "Col_ID",
cell_val_colname  = "Cell_Val")
## Symmetric non-singular matrix    m4 <- m2
dim(m4)
s.fl <- solve(m4)
m4.r <- as.matrix(m4)
s.r <- solve(m4.r)
expect_equal(s.r,as.matrix(s.fl))
})
m4 <- FLMatrix(connection,"FL_TRAIN","tblmatrixMulti",5)
solve(m4)
rankMatrix(m4)
hessen(m4)
