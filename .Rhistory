tanVevo
source('tanVevo.R')
source('tanvevo.R')
q()
install.packages("devtools")
library(devtools)
print "hello"
print hello
print ('hello')
install.packages("devtools")
library(devtools)
library(AdapteR)
connection <- odbcConnect("Gandalf")
db_name    <- "FL_R_WRAP"
table_name <- "tblAutoMpg"
table      <-  FLTable(connection, db_name, table_name)
FLFetch(table)
result <- FLLinRegr(table, primary_key = 'ObsID', response = 'MPG',exclude = c("CarNum","CarNumber"),class_spec = list(CarName = "BMW"), note = "Linear Regression Example")
library(AdapteR)
db_name    <- "FL_TRAIN"
table_name <- "tblAutoMpg"
result <- FLLinRegr(table, primary_key = 'ObsID', response = 'MPG',exclude = c("CarNum","CarNumber"),class_spec = list(CarName = "BMW"), note = "Linear Regression Example")
table      <-  FLTable(connection, db_name, table_name)
result <- FLLinRegr(table, primary_key = 'ObsID', response = 'MPG',exclude = c("CarNum","CarNumber"),class_spec = list(CarName = "BMW"), note = "Linear Regression Example")
table_name <- "tblAutoMpgTrain"
table      <-  FLTable(connection, db_name, table_name)
result <- FLLinRegr(table, primary_key = 'ObsID', response = 'MPG',exclude = c("CarNum","CarNumber"),class_spec = list(CarName = "BMW"), note = "Linear Regression Example")
result <- FLLinRegr(table, primary_key = 'ObsID', response = 'MPG',exclude = c("CarNum"),class_spec = list(CarName = "BMW"), note = "Linear Regression Example")
result <- FLLinRegr(table, primary_key = 'ObsID', response = 'MPG', class_spec = list(CarName = "BMW"), note = "Linear Regression Example")
result <- FLLinRegr(table, primary_key = 'ObsID', response = 'MPG',exclude = c("CarNum"),class_spec = list(CarName = "BMW"), note = "Linear Regression Example")
result <- FLLinRegr(table, primary_key = 'ObsID', response = 'Cylinders',exclude = c("CarNum"),class_spec = list(CarName = "BMW"), note = "Linear Regression Example")
result
result$coeffs
result@coeffs
a01 = FLFetch(result)
a01@coeffs
a01
a01
a01@stats
typeof(a01)
result
db_name    <- "FL_R_WRAP"
table_name <- "tblAutoMpg"
table      <-  FLTable(connection, db_name, table_name)
result <- FLLinRegr(table, primary_key = 'ObsID', response = 'MPG',exclude = c("CarNum","CarNumber"),class_spec = list(CarName = "BMW"), note = "Linear Regression Example")
library(AdapteR)
connection <- odbcConnect("Gandalf")
db_name    <- "FL_R_WRAP"
table_name <- "tblAutoMpg"
table      <-  FLTable(connection, db_name, table_name)
result <- FLLinRegr(table, primary_key = 'ObsID', response = 'MPG',exclude = c("CarNum","CarNumber"),class_spec = list(CarName = "BMW"), note = "Linear Regression Example")
q()
#Comment
c(1,2.3,1)
c(1,2.3,1L)
c(1L,2.3L,1L)
c(1L,2L,1L)
c(1,2,1L)
c(TRUE,FALSE,t,f)
c(TRUE,FALSE,T,F)
c("hello","world")
c('hello','world')
c('hello',"world")
c(1,'hello','world')
c(1,'hello',1,'world')
c(1,'hello',1,'world',  TRUE)
c(1,'hello',1,'world',  T)
typeof(C())
typeof(C(1,2))
typeof(C
typeof(C)
typeof(C
)
typeof(C)
attr(C)
attributes(C)
length(C)
C(1,2,3,4)
c(1,2,3,4)
length(c)
attributes(c)
test = c(1,2,2,4)
attributes(test)
length(test)
typeof(test)
test = c(1L,2L,2L,4L)
typeof(test)
test = c(1L,2L,2L,4)
typeof(test)
test
c(1,2,NA,3)
typeof(NA)
typeof(1)
typeof(1L)
typeof(L)
typeof("hi")
c(1,2,NA_1,3)
NA_2
c(1,2,NA_integer,3)
NA_integer_
NA_integer_1
a = NA_integer_
is.na(A)
is.na(a)
x <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9))
x
1:3
1:3,4:6,9:12
c(1:3,4:6,9:12)
rm(a,test,x)
x <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9))
str(x)
$x
x$
1
x$1
x$int
x@int
x
c(c(c()))
x <- c(c(c()))
str(c)
y <- list(list(list()))
str(y)
$y
$
rm(x,y)
list(1,2)
c(list())
list(c())
islist(x)
is.list(x)
x<-list(list(list(list())))
is.list(x)
is.list(x(list()))
rm(x)
1<2
2<"three"
"three"<2
c(list(),"a")
c(list(1),"a")
y <- 1:10
attr(y, "my_attribute") <- "This is a vector"
attr(y, "my_attribute")
str(attributes(y)) $ my_attribute
str(attributes(y)) $ my_attribute
attributes(y) $ my_attribute
x <- c(a = 1, b = 2, c = 3)
x
x $ a
x$a
x@a
a
x(a)
x.a
names(x)
typeof(x)
q()
x = c(1,2,3)
x
x[1]
x[2]
x[3]
x(1)
x{1}
x[1] = 4
x
x[1] = 5L
x
typeof(x[1])
typeof(x)
list(1L,2.3)
typeof(list())
x = list(1L,2.3)
typeof(x)
typeof(x[1])
x{1}
x[1]
x[[1]]
x[[1]][1]
x[[1]][2]
x[[2]][2]
x[[2]][1]
x$value
y$value
x@value
q()
library(AdapteR)
?FLLinRegr
library(RODBC)
?sqlQuery
?new
?names
phani <- data.frame(1:10,"mame", "tanya" )
phani
names(phani)
phani <- data.frame(col1 = 1:10,col2 = "mame", cole3 = "tanya")
phani <- data.frame(col1 = 1:10,col2 = "mame", col3 = "tanya")
phani
names(phani)
?FLLinRegr
connection <- odbcConnect("Gandalf")
db_name    <- "FL_R_WRAP"
table_name <- "tblAutoMpg"
table      <-  FLTable(connection, db_name, table_name)
names(tabble)
names(table)
?names.FLTable
names.FL_R_WRAP
names.FL_R_WRAP(table)
?sqlSquery
?sqlQquery
?sqlQuery
channel <- odbcConnect("test")
sqlQuery(connection,"SELECT * FROM tblAutoMpg")
db_name    <- "FL_TRAIN"
table      <-  FLTable(connection, db_name, table_name)
sqlQuery(connection,"SELECT * FROM tblAutoMpg")
sqlQuery(connection,"SELECT TOP 10 FROM tblAutoMpg")
sqlQuery(connection,"SELECT TOP 10 * FROM tblAutoMpg")
sqlQuery(connection,"SELECT TOP 10 * FROM tblAutoMpg ORDER BY 1")
?gsub
gsub("([ab])", "\\1_\\1_", "abc and ABC")
gsub("([ab])", "\\1_\\1_", "abc\\ an\d A\\\\\\\\\\BC")
gsub("([ab])", "\\1_\\1_", "abc\\ an\\d A\\\\\\\\\\BC")
gsub("([ab])", "\\1_\\1_", "abc a\nd ABC")
gsub("([ab])", "1_1_", "abc a\nd ABC")
gsub("([ab])", "\\1_\\2_", "abc a\\nd ABC")
gsub("([ab])", "\\_\\_", "abc a\\nd ABC")
gsub("([ab])", "\\*\\_", "abc a\\nd ABC")
gsub("([ab])", "\\*", "abc a\\nd ABC")
gsub("([ab])", "\\1", "abc a\\nd ABC")
gsub("([ab])", "\\2", "abc a\\nd ABC")
gsub("([ab])", "\\3", "abc a\\nd ABC")
gsub("([ab])", "\\200", "abc a\\nd ABC")
gsub("([ab])", "\\1_\\1_", "abc a\nd ABC")
gsub("(ab)", "\\1_\\1_", "abc a\nd ABC")
gsub("[ab]", "\\1_\\1_", "abc a\nd ABC")
gsub("ab", "\\1_\\1_", "abc a\nd ABC")
gsub("([ab])", "\\1_\\U_", "abc and ABC")
gsub("([ab])", "\\U_", "abc and ABC")
gsub("([ab])", "\\1_", "abc and ABC")
gsub("([ab])", "\\2_", "abc and ABC")
gsub("([ab])", "\\3_", "abc and ABC")
gsub("([ab])", "\\4_", "abc and ABC")
gsub("([ab])", "\\9_", "abc and ABC")
gsub("([ab])", "\\1_\\1_\\1_\\1_", "abc and ABC")
gsub("([ab])", "\\1_\\1_\\1_\\2_", "abc and ABC")
gsub("([ab])", "\\1_\\1_\\1_\\3_", "abc and ABC")
gsub("([ab])", "\\1_\\1_\\2_\\1_", "abc and ABC")
gsub("([abc])", "\\1_\\1_\\2_\\1_", "abc and ABC")
gsub("(ab)", "\\1_\\1_\\2_\\1_", "abc and ABC")
phani
phani$col1
phani$col1$1
phani$col1$
2
phani$col1(1)
phani$col1[1]
names(table)
names(phani)
tabble
table
sqlQuery(connection, "SELECT DATABASE")
phani
phani$col1
?cat
cat(3+5)
print(3+5)
iter <- stats::rpois(1, lambda = 10)
cat("iteration = ", iter <- iter + 1, "\n")
iter <- stats::rpois(1, lambda = 10)
iter
cat("iteration = ", iter <- iter + 1, "\n")
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
q()
library(AdapteR)
library(RODBC)
?setClass
x <- list(a = list(1,2,2,4), b = c(3.2,4.6))
x
x$a
x[[1]][[2]]
x[[3]][[3]]
x <- c(1,NA,2,3,4,NaN,5)
y<- c("a", "b", NA, "c")
good <- complete.cases(x,y)
y<- c("a", "b", NA, "c", NaN, NA, 4)
good <- complete.cases(x,y)
good
x(good)
x[good]
y[good]
Sys.time()
Sys.time()
x <- Sys.time()
as.numeric(x)
x <- Sys.time()
as.numeric(x)
round(as.numeric(x))
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
?rnorm
det(x)
?UseMethod
?det
?paste0
q()
?USeMethod
?UseMethod
data.frame(col1 = 1:12, col2 = "phani")
mame <- data.frame(col1 = 1:12, col2 = "phani")
mame
mame[1,1]
mame[2,2]
mame <- data.frame(col1 = 1:2, col2 = c("phani","tanya"))
mame
mame[2,2]
?lm
?deet
?det
?cor
?t
mame@col1
mame$col1
?martix
?matrix
list()
character(0)
library(Matrix)
?Matrix
?det
?t
?lu
q()
c("test","character")
c("RODBC","character")
Class.forName("com.teradata.jdbc.TeraDriver");
library(RJDBC)
Class.forName("com.teradata.jdbc.TeraDriver");
getwd()
.jaddClassPath("tdgssconfig.jar")
.jaddClassPath("terajdbc4.jar")
library(teradataR)
.jaddClassPath("tdgssconfig.jar")
.jaddClassPath("terajdbc4.jar")
library(teradataR)
q()
install.packages("RJDBC",dep=TRUE)
library(RJDBC)
drv <- JDBC("com.mysql.jdbc.Driver",
"/etc/jdbc/mysql-connector-java-3.1.14-bin.jar",
identifier.quote="`")
getwd()
JDBC (driverClass = "", classPath = "", identifier.quote = NA)
drv <- JDBC("com.mysql.jdbc.Driver",
"/etc/jdbc/mysql-connector-java-3.1.14-bin.jar", "‘")
drv <- JDBC("","", "‘")
conn<-dbConnect(drv,"gandalf")
import java.sql.*
?dbConnect
dbConnect("Gandalf")
q()
m<-matrix(1:6,2,3)
tr(m)
library(Matrix)
library(Matrix)
tr(m)
library(psych)
?trace
?tr
?tm
?matrix
diag(m)
sum(diag(m))
sum(m)
q()
m1<-matrix(1:6,2)
m1
m1[2,3]
m1(2,2)
m1[2,2]
m1[2,2] = 10
m1
m1[2,2] <- 12
m1
q()
?kmeans
?fanny
?faany
?fanny
??fanny
?kmeans
q()
?kmeans
q()
apply(matrix(1:4,2),1,mean)
devtools::load_all("AdapteR")
setwd("M:/RWrappers_Gregor/trunk/AdapteR")
devtools::load_all("AdapteR")
connection<-odbcConnect("Gandalf")
FLStartSession(connection)
m0 <- as.FLMatrix(matrix(1:10000,100), connection)
print(/n)
print(\n)
print("\n")
print("/n")
FLodbcClose(connection)
connection<-odbcConnect("Gandalf")
devtools::load_all("AdapteR")
FLStartSession(connection)
m0 <- as.FLMatrix(matrix(1:10000,100), connection)
FLodbcClose(connection)
connection<-odbcConnect("Gandalf")
devtools::load_all("AdapteR")
FLStartSession(connection)
m0 <- as.FLMatrix(matrix(1:10000,100), connection)
clc
FLodbcClose(connection)
connection<-odbcConnect("Gandalf")
devtools::load_all("AdapteR")
FLStartSession(connection)
m0 <- as.FLMatrix(matrix(1:10000,100), connection)
FLodbcClose(connection)
connection<-odbcConnect("Gandalf")
devtools::load_all("AdapteR")
FLStartSession(connection)
m0 <- as.FLMatrix(matrix(1:10000,100), connection)
q()
