{
    "contents" : "## assume m is assigned to be a in-database sparse Matrix object\nrequire(Matrix)\nm <- Diagonal(10)\ncolnames(m) <- c(\"a\",\"b\",\"c\",4:10)\nrownames(m) <- c(\"a\",\"b\",\"c\",4:10)\nm<-as.FLMatrix(m,connection)\n\n### TODO: insert code here that can save the Matrix m into Teradata as a deep matrix.\n\n### TODO: insert code here that replaces Matrix class with DBLytix in-database sparse matrix class.\n\n\nrequire(testthat)\n\ntest_that(\"get dimensions of a Matrix\",\n          {\n            expect_true(\n              is.numeric(\n                ncol(m)\n              ))\n            expect_true(\n              is.numeric(\n                nrow(m)\n              ))\n          })\n\ntest_that(\"get column and row names\",\n          {\n            expect_true(\n              is.character(\n                colnames(m)\n              ))\n            expect_true(\n              is.character(\n                rownames(m)\n              ))\n          })\n\n\n\n\ntest_that(\"selection of cell row 1, column 1\",\n          {\n            expect_true(\n              is.numeric(\n                m[1,1]\n              ))\n            expect_true(\n              length(m[1,1])==1\n            )\n          })\n\ntest_that(\"selection of first row\",\n          {\n            expect_true(\n              is.numeric(\n                m[1,]\n              ))\n            expect_true(\n              length(m[1,])==ncol(m))\n          })\n\ntest_that(\"selection of row by name works\",\n          expect_equal(\n            m[1,],m[rownames(m)[[1]],]))\n\ntest_that(\"selection of column by name works\",\n          expect_equal(\n            m[,1],m[,colnames(m)[[1]]]))\n\ntest_that(\"selection of a part of the matrix\",\n          {\n            expect_equal(3,\n                         nrow(m[1:3,]))\n            expect_equal(ncol(m),\n                         ncol(m[1:3,]))\n          })\n\n\ntest_that(\"selection of a part of the matrix\",\n          {\n            expect_equal(3,\n                         ncol(m[,1:3]))\n            expect_equal(nrow(m),\n                         nrow(m[,1:3]))\n            expect_equal(rownames(m),\n                         rownames(m[,1:3]))\n          })\n\ntest_that(\"selection of row by name works\",\n          expect_equal(\n            m[1:2,],m[rownames(m)[1:2],]\n          ))\n\ntest_that(\"selection of column by name works\",\n          expect_equal(\n            m[,1:2],m[,colnames(m)[1:2]]\n          ))\n\n\nm2 <- matrix(1:50,nrow=10)\ntest_that(\"Transpose\", {\n  expect_equal(c(5,10),dim(t(m2)))\n  expect_equal(as.vector(m2),as.vector(t(t(m2))))\n})\n\ntest_that(\"Scalar Multiplication and Addition\", {\n  expect_equal(c(10,5),dim(m2 + m2))\n  expect_equal(as.vector(m2 + m2),as.vector(2 * m2))\n  expect_equal(c(10,5),dim(m2 - m2))\n  expect_equal(as.vector(m2 + m2 - m2),as.vector(m2))\n})\n\ntest_that(\"Matrix Multiplication\", {\n  expect_equal(c(10,5),dim(m2 * m2))\n  expect_equal(as.vector(m2 * m2),as.vector(m2) * as.vector(m2))\n  \n  expect_equal(c(10,5),dim(m %*% m2))\n  expect_equal(as.vector(m2),as.vector(m %*% m2))\n})\n\n\ntest_that(\"Pseudo inverse is computed\" {\n  expect_equal(c(10,10),dim(ginv(m)))\n  ## use FLMatrixPseudoInvUdt\n})\n\n## Also needed:\n##      ## S4 method for signature 'CsparseMatrix,diagonalMatrix'\n##      x %*% y\n\n##      ## S4 method for signature 'dgeMatrix,missing'\n##      crossprod(x, y = NULL, boolArith = NA, ...)\n##      ## S4 method for signature 'CsparseMatrix,diagonalMatrix'\n##      crossprod(x, y = NULL, boolArith = NA, ...)\n##             ## .... and for many more signatures\n\n##      ## S4 method for signature 'CsparseMatrix,ddenseMatrix'\n##      tcrossprod(x, y = NULL, boolArith = NA, ...)\n##      ## S4 method for signature 'TsparseMatrix,missing'\n##      tcrossprod(x, y = NULL, boolArith = NA, ...)\n##             ## .... and for many more signatures\n",
    "created" : 1445194097490.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "516158165",
    "id" : "F5B82325",
    "lastKnownWriteTime" : 578055781,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}