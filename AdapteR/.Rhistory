lm.D9$model
as.matrix(lm.D9$model)
library(Matrix)
rankMatrix(as.matrix(lm.D9$model))
t<-lm.D9
t$residuals <- NULL
plot(t)
t$residuals <- lm.D9$residuals
t$effects <- NULL
plot(t)
t$assign
t$assign<-NULL
plot(t)
t$df.residual
t$contrasts
t$contrasts<-NULL
plot(t)
t$xlevels
t$xlevels<-NULL
plot(t)
t$xlevels <- lm.D9$xlevels
plot(t)
t$qr
t$qr <- NULL
plot(t)
lm.D9 <- lm(weight ~ group,qr=FALSE)
t1<-lm.D9
plot(t1)
lm.D9 <- lm(weight ~ group)
t1$qr <- lm.D9$qr
qr(lm.D9$model)
qr(mylm$model)
mylm$qr
t$df.residual<-NULL
plot(t)
t$qr <- lm.D9$qr
plot(t)
t$df.residual <- lm.D9$df.residual
plot(t)
t$terms
t$terms<-NULL
plot(t)
t$fitted.values<-NULL
plo(t)
plot(t)
t$terms<-lm.D9$terms
plot(t)
t$model<-NULL
plot(t)
t$residuals<-NULL
plot(t)
t$terms
mylm$model
mylm$xlevels
mylm$terms
mylm<-lm(ctl~trt+weight[1:10])
mylm<-lm(ctl~trt+weight[1:10],x=TRUE,y=TRUE)
mylm$x
class(mylm$x)
qr(mylm$x)
mylm$qr
rankMatrix(mylm$x)
mylm$terms<-list()
plot(mylm)
lm.D9$terms
terms(weight~formula)
terms(trash1~trash)
t$terms<-terms(trash1~trash)
t$residuals <- lm.D9$residuals
plot(t)
t$terms<-terms(weight~group)
plot(t)
t$xlevels
t$xlevels<-""
plot(t)
t$call
call()
call("lm")
m<-matrix(1:1000000,1000)
solve(m)
m<-matrix(rnorm(1000000),1000)
solve(m)
plot(lm.D9)
plot(lm.D9)
?plot
plot(lm.D9$fitted.values,lm.D9$residuals)
?plot
plot(lm.D9$fitted.values,lm.D9$residuals,type="o")
plot(lm.D9$fitted.values,lm.D9$residuals,type="l")
plot.lm''
plot.lm
lm.plot
?lm
?plot
plot(lm.D9$fitted.values,lm.D9$residuals,type="b")
lm.D9$fitted.values
plot(lm.D9)
plot(lm.D9$fitted.values,lm.D9$residuals,type="b")
?sqrt
plot(sqrt(lm.D9$fitted.values),lm.D9$residuals,type="b")
plot(lm.D9)
m
mylm$x
mylm$qr
qr(m)
m<-matrix(4000000,2000)
f<-qr(m)
f$qr
m<-matrix(4000000,2000)
m<-matrix(1:4000000,2000)
f<-qr(m)
library(cluster)
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D9$effects
terms(weight~group)
lm.D9$terms
plot(lm.D9)
lm.D9$qr
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group,x=TRUE,y=TRUE)
lm.D9$qr
lm.D9$qr[[1]]
lm.D9$x
t<-lm.D9
t$qr<-t$x
plot(t)
class(t)
t$qr
plot(t)
t$qr[[1]]<-t$x
t$qr<-lm.D9$qr
t$qr[[1]]<-lm.D9$x
plot(t)
t$qr
lm.D9$x
lm.D9$qr
rownames(t$qr[[1]])
colnames(t$qr[[1]])
t$qr[[1]] <- matrix(rnorm(40),20,dimnames=dimnames(t$qr[[1]]))
plot(t)
plot(lm.D9)
a<-c("a","b")
a[-"a"]
a["a"]
setwd("C:/Users/phani/Downloads/AdapteR")
library(RJDBC)
library(testthat)
library(plyr)
library(RODBC)
library(reshape2)
library(cluster)
devtools::load_all("AdapteR")
devtools::document()
devtools::check()
search()
devtools::load_all("AdapteR")
devtools::load_all("AdapteR")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build()
devtools::create()
?devtools::create()
?devtools::create
?devtools::create("C:/Users/phani/Desktop/AdapteR2")
devtools::create("C:/Users/phani/Desktop/AdapteR2")
devtools::document()
getwd()
devtools::load_all("AdapteR")
devtools::document()
?store
devtools::build()
devtools::load_all()
devtools::load_all(".")
devtools::document()
setwd("C:/Users/phani/Desktop")
setwd("C:/Users/phani/Downloads/AdapteR")
devtools::build()
devtools::load_all()
devtools::load_all("AdapteR")
devtools::document()
devtools::build()
devtools::load_all("AdapteR")
1==1
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
devtools::document()
devtools::build()
`==.default`
devtools::load_all("AdapteR")
setwd("C:/Users/phani/Downloads/AdapteR")
library(RJDBC)
library(testthat)
library(plyr)
library(RODBC)
library(reshape2)
library(cluster)
devtools::load_all("AdapteR")
devtools::document()
FLStartSession(connection)
devtools::document()
devtools::build()
devtools::load_all("AdapteR")
devtools::load_all("AdapteR")
devtools::build()
devtools::document()
devtools::build()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::build()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::build()
devtools::load_all()
devtools::document()
devtools::build()
devtools::load_all()
devtools::document()
devtools::document()
devtools::build()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
flmatrix <- FLMatrix(connection, "FL_DEMO", "tblMatrixMulti",5, "Matrix_id","ROW_ID","COL_ID","CELL_VAL")
eigen(flmatrix)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
library(RODBC)
devtools::check()
require(testthat)
expect_eval_equal <- function(initF,FLcomputationF,RcomputationF,benchmark=FALSE,...)
{
I <- initF(...)
expect_equal(FLcomputationF(I$FL),
RcomputationF(I$R),
check.attributes=FALSE)
}
expect_flequal <- function(a,b,...){
if(is.list(a))
for(i in 1:length(a))
expect_flequal(a[[i]],b[[i]],...)
expect_equal(a,b,...)
}
## Increase n for increasing length of FLVector.
## If isRowVec=TRUE, rowVector(one observation of all columns) is returned.
initF.FLVector <- function(n,isRowVec=FALSE)
{
sqlSendUpdate(connection,
c(paste0("DROP TABLE FL_DEMO.test_vectortable_AdapteR;"),
paste0("CREATE TABLE FL_DEMO.test_vectortable_AdapteR
AS(SELECT 1 AS VECTOR_ID,a.serialval AS VECTOR_INDEX,
CAST(RANDOM(0,100) AS FLOAT)AS VECTOR_VALUE
FROM FL_DEMO.fzzlserial a
WHERE a.serialval < ",ifelse(isRowVec,2,n+1),") WITH DATA ")))
table <- FLTable(connection,
"FL_DEMO",
"test_vectortable_AdapteR",
"VECTOR_INDEX",
whereconditions=paste0("FL_DEMO.test_vectortable_AdapteR.VECTOR_ID = 1")
)
if(isRowVec)
flv <- table[1,base::sample(c("VECTOR_VALUE","VECTOR_INDEX"),n,replace=TRUE)]
else
flv <- table[1:n,"VECTOR_VALUE"]
Rvector <- as.vector(flv)
return(list(FL=flv,R=Rvector))
}
## Increase the value of n to increase the dimensions of FLMatrix returned.
## Returns n*n or n*(n-1) based on isSquare.
initF.FLMatrix <- function(n,isSquare=FALSE)
{
sqlSendUpdate(connection,
c(paste0("DROP TABLE FL_DEMO.test_matrixtable_AdapteR;"),
paste0("CREATE TABLE FL_DEMO.test_matrixtable_AdapteR
AS(SELECT 1 AS MATRIX_ID,a.serialval AS ROW_ID,
b.serialval AS COL_ID,CAST(random(0,100) AS FLOAT)AS CELL_VAL
FROM FL_DEMO.fzzlserial a,FL_DEMO.fzzlserial b
WHERE a.serialval < ",n+1," and b.serialval < ",ifelse(isSquare,n+1,n),") WITH DATA ")))
flm <- FLMatrix(connection,
database          = "FL_DEMO",
table_name = "test_matrixtable_AdapteR",
matrix_id_value   = 1,
matrix_id_colname = "Matrix_ID",
row_id_colname    = "Row_ID",
col_id_colname    = "Col_ID",
cell_val_colname  = "Cell_Val")
Rmatrix <- as.matrix(flm)
return(list(FL=flm,R=Rmatrix))
}
initF.FLTable <- function(rows,cols)
{
WideTable <- FLTable(connection,
"FL_DEMO",
"fzzlserial",
"serialval",
whereconditions=paste0("FL_DEMO.fzzlserial.serialval<100"))
return(WideTable[1:rows,base::sample(c("randval","serialval"),cols,replace=TRUE)])
}
setMethod("expect_equal",signature("FLMatrix","matrix"),
function(object,expected,...) expect_equal(as.matrix(object),expected,...))
setMethod("expect_equal",signature("FLMatrix","FLMatrix"),
function(object,expected,...) expect_equal(as.matrix(object),as.matrix(expected),...))
setMethod("expect_equal",signature("dgCMatrix","FLMatrix"),
function(object,expected,...) expect_equal(object,as.matrix(expected),...))
setMethod("expect_equal",signature("FLVector","vector"),
function(object,expected,...) expect_equal(as.vector(object),expected,...))
setMethod("expect_equal",signature("FLVector","FLVector"),
function(object,expected,...) expect_equal(as.vector(object),as.vector(expected),...))
setMethod("expect_equal",signature("matrix","matrix"),
function(object,expected,...) testthat::expect_equal(as.vector(object),as.vector(expected),...))
setMethod("expect_equal",signature("list","list"),
function(object,expected,...)
llply(names(object),
function(i)
expect_equal(object[[i]],expected[[i]],...)))
require(testthat)
##' tests if a R matrix is correctly stored and
##' represented when casting the R matrix into FLMatrix
##' and correctly recieved back, when cast to a vector.
##' checking dimnames, checking for subsetting.
##' For an optical check, both matrices are printed.
##'
##' @param a an R Matrix
##' @author  Gregor Kappler <g.kappler@@gmx.net>
test_equal_RMatrix_FLMatrix<- function(a){
# browser()
debugOld <- getOption("debugSQL")
options(debugSQL=FALSE)
b <- as.FLMatrix(a,connection)
a <- Matrix(a)
options(debugSQL=debugOld)
expect_equal_Matrix(a,b,
"cast Matrix equal")
test_Matrix_Subsetting(a,b,"as.FLMatrix")
}
##' converts FLMatrix to r matrix and checks if
##' recursive identical subsetting results in identical
##' matrices.
##'
##' @param b FLMatrix
##' @author  Gregor Kappler <g.kappler@@gmx.net>
test_equal_FLMatrix_RMatrix<- function(b){
# browser()
debugOld <- getOption("debugSQL")
options(debugSQL=FALSE)
a <- as.matrix(b)
options(debugSQL=debugOld)
expect_equal_Matrix(a,b,
"cast Matrix equal")
test_Matrix_Subsetting(a,b,"as.FLMatrix")
}
##'
##'
##'
##' @param a
##' @param b
##' @param desc
##' @return
##' @author  Gregor Kappler <g.kappler@@gmx.net>
test_Matrix_Subsetting <- function(a,b, desc=""){
if(nrow(a)<3) return()
nr <- nrow(a) -2 ##%/% 2
nc <- ncol(a) -2 ## %/% 2
rowi <- sample(1:nrow(a),nr)
coli <- sample(1:ncol(a),nc)
asel <- a[rowi,coli,drop=FALSE]
bsel <- b[rowi,coli,drop=FALSE]
expect_equal_Matrix(asel,bsel,
paste0(
"subset by index of ",
desc))
## recursively test!
test_Matrix_Subsetting(asel,bsel,
paste0(
"indexed subset of ",
desc))
if(!is.null(rownames(a)))
rowi <- sample(rownames(a),nr)
if(!is.null(colnames(a)))
coli <- sample(colnames(a),nc)
asel <- a[rowi,coli,drop=FALSE]
bsel <- b[rowi,coli,drop=FALSE]
expect_equal_Matrix(asel,bsel,
paste0(
"subset by names of ",
desc))
## recursively test!
test_Matrix_Subsetting(asel,bsel,
paste0(
"named subset of ",
desc))
}
expect_equal_Matrix <- function(a,b,desc="",debug=TRUE){
if(debug==TRUE){
cat("\n-------------- ",desc,"\nR Matrix Object:\n")
print(a)
cat("\nFL Matrix Object:\n")
print(b)
}
stripNames <- function(x) {
if(is.null(x)) return(NULL)
if(is.numeric(x) & all(x==as.numeric(names(x))))
x <- NULL
else
names(x) <- NULL
if(is.list(x)) x <- llply(x,stripNames)
##if(is.null(unlist(x))) x <- NULL
x
}
test_that(desc,{
expect_equal(dimnames(a),stripNames(dimnames(b)))
expect_equal(rownames(a),stripNames(rownames(b)))
expect_equal(colnames(a),stripNames(colnames(b)))
expect_equal(as.vector(a),as.vector(b))
})
}
test_that("check FLDims if all elements of a row are zero",
{
m <- Matrix(c(0,1,0,2),2,sparse=T)
m <- as(m,"dgCMatrix")
M <- as.FLMatrix(m,connection)
T1 <- initF.FLTable(rows=5,cols=5)
T1R <- as.data.frame(T1)
expect_equal(AdapteR::dim(M),
base::dim(m),
check.attributes=FALSE)
expect_equal(AdapteR::dim(T1),
base::dim(T1R),
check.attributes=FALSE)
})
# Testing FLLUDecomp
#fail
test_that("check LU Decomposition",
{
m <- initF.FLMatrix(n=5)
expect_equal(AdapteR::expand(AdapteR::lu(m$FL)),
Matrix::expand(Matrix::lu(m$R)),check.attributes=FALSE)
})
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
# Testing FLLUDecomp
#fail
test_that("check LU Decomposition",
{
m <- initF.FLMatrix(n=5)
expect_equal(AdapteR::expand(AdapteR::lu(m$FL)),
Matrix::expand(Matrix::lu(m$R)),check.attributes=FALSE)
})
devtools::document()
devtools::build()
# Testing FLLUDecomp
#fail
test_that("check LU Decomposition",
{
m <- initF.FLMatrix(n=5)
expect_equal(AdapteR::expand(AdapteR::lu(m$FL)),
Matrix::expand(Matrix::lu(m$R)),check.attributes=FALSE)
})
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::build()
