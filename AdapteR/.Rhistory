.jcall(ps,"V","addBatch")
}
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],.jlong(d[[4]][i]))
})
.jcall(ps,"[I","executeBatch")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
library(AdapteR)
library(RJDBC)
?.jfloat
.jfloat(3.5)
as.integer(3.5)
.jlong(3.5)
.jbyte(3.5)
m<-summary(Matrix(rnorm(1000),100,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
library(RJDBC)
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
conn <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
library(RJDBC)
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
conn <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
.jcall(conn@jc,"V","setAutoCommit",FALSE)
ps = .jcall(conn@jc,"Ljava/sql/PreparedStatement;","prepareStatement","insert into FL_DEMO.foo values(?,?,?,?)")
myinsert <- function(arg1,arg2,arg3,arg4){
.jcall(ps,"V","setInt",as.integer(1),as.integer(arg1))
.jcall(ps,"V","setInt",as.integer(2),as.integer(arg2))
.jcall(ps,"V","setInt",as.integer(3),as.integer(arg3))
.jcall(ps,"V","setFloat",as.integer(4),arg4)
.jcall(ps,"V","addBatch")
}
t<-.jfloat(3.5)
myinsert(1,1,1,t)
.jcall(ps,"[I","executeBatch")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
myinsert(1,1,1,0.5679812)
myinsert(1,1,1,4.67)
myinsert(1,1,1,.jfloat(0.45780))
.jcall(ps,"[I","executeBatch")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
d
myinsert(1,1,1,.jfloat(-0.45780))
.jcall(ps,"[I","executeBatch")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d varchar(100));")
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbCommit(conn)
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d varchar(100));")
dbCommit(conn)
myinsert(1,1,1,"1")
myinsert <- function(arg1,arg2,arg3,arg4){
.jcall(ps,"V","setInt",as.integer(1),as.integer(arg1))
.jcall(ps,"V","setInt",as.integer(2),as.integer(arg2))
.jcall(ps,"V","setInt",as.integer(3),as.integer(arg3))
.jcall(ps,"V","setString",as.integer(4),arg4)
.jcall(ps,"V","addBatch")
}
myinsert(1,1,1,"1")
.jcall(ps,"[I","executeBatch")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
myinsert(1,1,1,"a")
.jcall(ps,"[I","executeBatch")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
myinsert <- function(arg1,arg2,arg3,arg4){
.jcall(ps,"V","setInt",as.integer(1),as.integer(arg1))
.jcall(ps,"V","setInt",as.integer(2),as.integer(arg2))
.jcall(ps,"V","setInt",as.integer(3),as.integer(arg3))
.jcall(ps,"V","setFloat",as.integer(4),.jfloat(arg4))
.jcall(ps,"V","addBatch")
}
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbCommit(conn)
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d int);")
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
dbCommit(conn)
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbCommit(conn)
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
myinsert(1,2,3,-0.456123)
.jcall(ps,"[I","executeBatch")
dbCommit(conn)
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbCommit(conn)
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
myinsert(1,1,1,-0.2345)
.jcall(ps,"[I","executeBatch")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbCommit(conn)
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
.jcall(ps,"[I","executeBatch")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbCommit(conn)
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
m<-summary(Matrix(rnorm(1000000),1000,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
system.call(.jcall(ps,"[I","executeBatch"))
.jcall(ps,"[I","executeBatch")
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbCommit(conn)
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
m<-summary(Matrix(rnorm(500000),1000,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
system.call(.jcall(ps,"[I","executeBatch"))
system.time(.jcall(ps,"[I","executeBatch"))
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
m<-summary(Matrix(rnorm(100000),1000,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbCommit(conn)
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
system.time(.jcall(ps,"[I","executeBatch"))
library(AdapteR)
library(RJDBC)
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
conn <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
conn <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
.jcall(conn@jc,"V","setAutoCommit",FALSE)
ps = .jcall(conn@jc,"Ljava/sql/PreparedStatement;","prepareStatement","insert into FL_DEMO.foo values(?,?,?,?)")
myinsert <- function(arg1,arg2,arg3,arg4){
.jcall(ps,"V","setInt",as.integer(1),as.integer(arg1))
.jcall(ps,"V","setInt",as.integer(2),as.integer(arg2))
.jcall(ps,"V","setInt",as.integer(3),as.integer(arg3))
.jcall(ps,"V","setFloat",as.integer(4),.jfloat(arg4))
.jcall(ps,"V","addBatch")
}
m<-summary(Matrix(rnorm(100000),1000,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
.jcall(ps,"[I","executeBatch")
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbCommit(conn)
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
m<-summary(Matrix(rnorm(50000),50,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
ps = .jcall(conn@jc,"Ljava/sql/PreparedStatement;","prepareStatement","insert into FL_DEMO.foo values(?,?,?,?)")
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
system.time(.jcall(ps,"[I","executeBatch"))
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbCommit(conn)
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
dbCommit(conn)
myinsert(1,2,3,-0.65)
system.time(.jcall(ps,"[I","executeBatch"))
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbSendUpdate(conn,"delete from FL_DEMO.foo")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
m<-summary(Matrix(rnorm(5000),50,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
ps = .jcall(conn@jc,"Ljava/sql/PreparedStatement;","prepareStatement","insert into FL_DEMO.foo values(?,?,?,?)")
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
system.time(.jcall(ps,"[I","executeBatch"))
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbSendUpdate(conn,"delete from FL_DEMO.foo")
dbCommit(conn)
ps = .jcall(conn@jc,"Ljava/sql/PreparedStatement;","prepareStatement","insert into FL_DEMO.foo values(?,?,?,?)")
m<-summary(Matrix(rnorm(10000),100,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
system.time(.jcall(ps,"[I","executeBatch"))
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbSendUpdate(conn,"delete from FL_DEMO.foo")
dbCommit(conn)
m<-summary(Matrix(rnorm(500000),100,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
ps = .jcall(conn@jc,"Ljava/sql/PreparedStatement;","prepareStatement","insert into FL_DEMO.foo values(?,?,?,?)")
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
system.time(.jcall(ps,"[I","executeBatch"))
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
library(AdapteR)
library(RJDBC)
m<-summary(Matrix(rnorm(50000),100,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
conn <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
conn <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
dbSendUpdate(conn,"drop table FL_DEMO.foo;")
dbSendUpdate(conn,"create table FL_DEMO.foo (a int, b int, c int, d float);")
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
.jcall(conn@jc,"V","setAutoCommit",FALSE)
ps = .jcall(conn@jc,"Ljava/sql/PreparedStatement;","prepareStatement","insert into FL_DEMO.foo values(?,?,?,?)")
myinsert <- function(arg1,arg2,arg3,arg4){
.jcall(ps,"V","setInt",as.integer(1),as.integer(arg1))
.jcall(ps,"V","setInt",as.integer(2),as.integer(arg2))
.jcall(ps,"V","setInt",as.integer(3),as.integer(arg3))
.jcall(ps,"V","setFloat",as.integer(4),.jfloat(arg4))
.jcall(ps,"V","addBatch")
}
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
.jcall(ps,"[I","executeBatch")
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
m<-summary(Matrix(rnorm(20000),100,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
ps = .jcall(conn@jc,"Ljava/sql/PreparedStatement;","prepareStatement","insert into FL_DEMO.foo values(?,?,?,?)")
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
.jcall(ps,"[I","executeBatch")
dbCommit(conn)
dbSendUpdate(conn,"delete from FL_DEMO.foo")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
m<-summary(Matrix(rnorm(15000),100,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
ps = .jcall(conn@jc,"Ljava/sql/PreparedStatement;","prepareStatement","insert into FL_DEMO.foo values(?,?,?,?)")
system.time(for(i in 1:nrow(d)){
myinsert(d[[1]][i],d[[2]][i],d[[3]][i],d[[4]][i])
})
system.time(.jcall(ps,"[I","executeBatch"))
library(RODBCext)
library(RODBC)
con <- odbcConnect("Gandalf")
m<-summary(Matrix(rnorm(1000),100,sparse = TRUE))
m <- cbind(1,m)
d<-as.data.frame(m)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
dbSendUpdate(conn,"delete from FL_DEMO.foo")
dbCommit(conn)
dbGetQuery(conn,"select top 10 * from fl_DEMO.foo")
dbCommit(conn)
sqlExecute(con, "INSERT INTO foo VALUES (?, ?,?,?)", d)})
system.time({sqlExecute(con, "INSERT INTO foo VALUES (?, ?,?,?)", d)})
system.time({sqlExecute(con, "INSERT INTO FL_DEMO.foo VALUES (?, ?,?,?)", d)})
?"missing"
data(iris)
d<-iris
colnames(d)<-c("a","b","c","d","e")
library(RJDBC)
library(AdapteR)
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
conn <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
conn <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
dbWriteTable(conn,"iris2",value = d)
data(iris)
t<-iris
t[c(FALSE,FALSE,FALSE,FALSE,FALSE,TRUE)]
t[FALSE,FALSE,FALSE,FALSE,FALSE,TRUE]
t[[FALSE,FALSE,FALSE,FALSE,FALSE,TRUE]]
t[c(FALSE,FALSE,FALSE,FALSE,FALSE,TRUE),]
t[,c(FALSE,FALSE,FALSE,FALSE,FALSE,TRUE)]
t[,c(FALSE,FALSE,FALSE,FALSE,TRUE)]
t[,c(FALSE,FALSE,FALSE,TRUE,TRUE)]
t[,c(FALSE,FALSE,FALSE,FALSE,TRUE)]<-as.character(t[,c(FALSE,FALSE,FALSE,FALSE,TRUE)])
t
class(t$Species)
t[,c(FALSE,FALSE,FALSE,TRUE,TRUE)]<-as.character(t[,c(FALSE,FALSE,FALSE,TRUE,TRUE)])
class(t$Petal.Width)
class(t)
class(iris$Species)
data(iris)
unique(iris)
d<-data.frame(a=1:2)
d[0]
class(d[0])
is.null(d[0])
length(d[0])
dim(d[0])
t<-length(d[0])
t
setwd("C:/Users/phani/Downloads/AdapteR")
library(RJDBC)
library(testthat)
library(plyr)
library(RODBC)
library(reshape2)
library(cluster)
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
?lapply
?llply
llply(mtcars, round)
llply(llply(mtcars, round), table)
data(iris)
unique(iris$Species)
as.numeric(c("1","2"))
as.numeric(c("1","a"))
column
is.numeric(1)
is.numeric(as.integer(1))
d
"a" %in% c("a","b")
"c" %in% c("a","b")
c("a")[2]
c(1:2)[3]
is.na(c(1:2)[3])
t<-NULL
t[1]
paste0("create ",rnorm(1),"as ",c("a","b"))
paste0("create ",rnorm(1)," as ",c("a","b"))
?llply
deeptable <- FLTable(connection,"FL_DEMO","tblUSArrests","ObsID","VarID","Num_Val")
connection <- odbcConnect("Gandalf")
deeptable <- FLTable(connection,"FL_DEMO","tblUSArrests","ObsID","VarID","Num_Val")
llply
?llply
l<-llply(list(a=deeptable,b=deeptable),function(x)kmeans(x,3))
FLStartSession(connection)
l<-kmeans(deepable,3)
l<-kmeans(deeptable,3)
l<-llply(list(a=deeptable,b=deeptable),function(x)kmeans(x,3))
l$a
l<-list(c(l$a,l))
length(l)
l<-list()
l<-c(list(a=1),l)
l
l<-c(list(b=1),l)
l
?lapply
lapply(1:2,function(x){x})
names(lapply(1:2,function(x){x}))
l<-llply(2:3,function(x)kmeans(deeptable,x))
names(l)
length(l)
l[[1]]
names(l)<-c("a","b")
llply(list(a=1),names)
devtools::load_all("AdapteR")
devtools::load_all("AdapteR")
setwd("C:/Users/phani/Downloads/AdapteR")
library(RJDBC)
library(testthat)
library(plyr)
library(RODBC)
library(reshape2)
library(cluster)
devtools::load_all("AdapteR")
m4 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",5,"Matrix_id","ROW_ID","COL_ID","CELL_VAL",dimnames = list(5:1,letters[1:5])) # Symmetric non-singular matrix of dimension 5x5
solve(m4)
irisfl<-FLTable(connection,"FL_DEMO","iris","rownames")
dimnames(irisfl)
t<-kmeans(irisfl,3)
plot(t)
l<-FLCApply(irisfl,function(x)kmeans(x,3),"Species")
devtools::load_all("AdapteR")
l<-FLCApply(irisfl,function(x)kmeans(x,3),"Species")
plot(l$setosa)
l$setosa
print(l$setosa)
print(l$setosa)
plot(l$setosa)
devtools::load_all("AdapteR")
l<-FLCApply(irisfl,function(x)kmeans(x,3),"Species")
plot(l$setosa)
l$virginica@wideToDeepAnalysisId
l$versicolor$centers
l$versicolor$cluster
l$setosa$cluster
sqlQuery(connection,"drop table tempuniquewide12345678")
sqlQuery(connection,"drop table tempmapuniquewide12345678")
devtools::load_all("AdapteR")
devtools::load_all("AdapteR")
plot(l$setosa)
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
conn <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
.jaddClassPath("/Users/phani/Downloads/terajdbc4.jar")
.jaddClassPath("/Users/phani/Downloads/tdgssconfig.jar")
library(teradataR)
conn <- tdConnect("10.200.4.116","mbondre","fzzlpass","FL_DEMO","jdbc")
devtools::load_all("AdapteR")
FLStartSession(conn)
l<-FLCApply(irisfl,function(x)kmeans(x,3),"Species")
l$setosa
print(l$setosa)
print(l$setosa)
plot(l$setosa)
plot(l$virginica)
plot(l$versicolor)
plot(l$virginica)
sqlQuery(connection,"drop table tempuniquewide12345678")
sqlQuery(connection,"drop table tempmapuniquewide12345678")
plot(l$virginica)
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
irisfl<-FLTable(connection,"FL_DEMO","iris","rownames")
l<-FLCApply(irisfl,function(x)kmeans(x,3),"Species")
plot(l$setosa)
