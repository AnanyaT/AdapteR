check.attributes=FALSE)
})
test_that("check result for M_IntegerDivision",
{
expect_eval_equal(initF=function(n) {
a <- initF.FLMatrix(n=5,isSquare=TRUE)
b <- FLMatrix(connection,
"FL_DEMO", "tblmatrixMulti",
5, "MATRIX_ID",
"ROW_ID","COL_ID","CELL_VAL")
list(R=list(a$R,
as.matrix(b)),
FL=list(a$FL,
b))
},function(x) store(do.call("%/%",x)),
function(x) do.call("%/%",x)
)
})
## Testing M_IntegerDivision
## Bad performance
test_that("check result for M_IntegerDivision",
{
M1 <- initF.FLMatrix(n=5,isSquare=TRUE)
M2 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",5,"Matrix_id","ROW_ID","COL_ID","CELL_VAL")
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,10),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,10),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,isRowVec=TRUE)
expect_equal(store(M1$FL%/%M2),M1$R%/%M2R,check.attributes=FALSE)
expect_equal(store(V1%/%V2),V1R%/%V2R,check.attributes=FALSE)
expect_equal(store(P1$FL%/%P1$FL),P1$R%/%P1$R,check.attributes=FALSE)
expect_equal(store(V1%/%P1$FL),V1R%/%P1$R,check.attributes=FALSE)
expect_equal(store(P1$FL%/%V2),P1$R%/%V2R,check.attributes=FALSE)
expect_equal(store(M1$FL%/%V2),M1$R%/%V2R,check.attributes=FALSE)
expect_equal(store(M1$FL%/%P1$FL),M1$R%/%P1$R,check.attributes=FALSE)
expect_equal(store(V1%/%M2),V1R%/%M2R,check.attributes=FALSE)
expect_equal(store(P1$FL%/%M2),P1$R%/%M2R,check.attributes=FALSE)
})
## Testing M_CrossProduct only two FLMatrices
test_that("check result for M_CrossProduct",
{
expect_eval_equal(initF=function(n) {
a <- initF.FLMatrix(n=5)
b <- FLMatrix(connection,
"FL_DEMO", "tblmatrixMulti",
3, "MATRIX_ID",
"ROW_ID","COL_ID","CELL_VAL")
list(R=list(a$R,
as.matrix(b)),
FL=list(a$FL,
b))
},function(x) store(do.call("%*%",x)),
function(x) do.call("%*%",x)
)
})
## Testing M_CrossProduct
## Bad performance
test_that("check result for M_CrossProduct",
{
M1 <- initF.FLMatrix(n=5) # 5*4 matrix
M2 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",3,"MATRIX_ID","ROW_ID","COL_ID","CELL_VAL") # 4*5 matrix
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,5),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,5),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=5,isRowVec=TRUE)
expect_equal(store(M1$FL %*% M2),M1$R%*%M2R,check.attributes=FALSE)
expect_equal(store(V1%*%V1),V1R%*%V1R,check.attributes=FALSE)
expect_equal(store(P1$FL%*%P1$FL),P1$R%*%P1$R,check.attributes=FALSE)
expect_equal(store(V1%*%P1$FL),V1R%*%P1$R,check.attributes=FALSE)
expect_equal(store(P1$FL%*%V1),P1$R%*%V1R,check.attributes=FALSE)
expect_equal(store(M2%*%V2),M2R%*%V2R,check.attributes=FALSE)
expect_equal(store(M2%*%P1$FL),M2R%*%P1$R,check.attributes=FALSE)
expect_equal(store(V1%*%M1$FL),V1R%*%M1$R,check.attributes=FALSE)
expect_equal(store(P1$FL%*%M1$FL),P1$R%*%M1$R,check.attributes=FALSE)
})
## Testing M_Addition
test_that("check result for M_Addition",
{
M1 <- initF.FLMatrix(n=5,isSquare=TRUE)
M2 <- FLMatrix(connection,
"FL_DEMO", "tblmatrixMulti",
5, "MATRIX_ID",
"ROW_ID","COL_ID","CELL_VAL")
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,10),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,10),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,isRowVec=TRUE)
expect_eval_equal(initF=function(n) {
a <- initF.FLMatrix(n=5,isSquare=TRUE)
b <- FLMatrix(connection,
"FL_DEMO", "tblmatrixMulti",
5, "MATRIX_ID",
"ROW_ID","COL_ID","CELL_VAL")
list(R=list(a$R,
as.matrix(b)),
FL=list(a$FL,
b))
},function(x) do.call("+",x),
function(x) do.call("+",x)
)
## gk: try refactoring in eval_equal function(x) do.call("+",x) == a+b
expect_equal(M1$FL+M2,
M1$R+M2R,
check.attributes=FALSE)
expect_equal(V1+V2,
V1R+V2R,
check.attributes=FALSE)
expect_equal(P1$FL+P1$FL,
P1$R+P1$R,
check.attributes=FALSE)
expect_equal(V1+P1$FL,
V1R+P1$R,
check.attributes=FALSE)
expect_equal(P1$FL+V2,
P1$R+V2R,
check.attributes=FALSE)
expect_equal(M1$FL+V2,
M1$R+V2R,
check.attributes=FALSE)
expect_equal(M1$FL+P1$FL,
M1$R+P1$R,
check.attributes=FALSE)
expect_equal(V1+M2,
V1R+M2R,
check.attributes=FALSE)
expect_equal(P1$FL+M2,
P1$R+M2R,
check.attributes=FALSE)
expect_equal(P1$FL+P1$FL+V1+V2+M2+P1$FL+M1$FL+V2,
P1$R+P1$R+V1R+V2R+M2R+P1$R+M1$R+V2R,
check.attributes=FALSE)
})
## Testing M_Division
test_that("check result for M_Division",
{
M1 <- initF.FLMatrix(n=5,
isSquare=TRUE)
M2 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",
5,"Matrix_id","ROW_ID","COL_ID","CELL_VAL")
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,
10),
connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,
10),
connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,
isRowVec=TRUE)
expect_equal(store(M1$FL/M2),
M1$R/M2R,
check.attributes=FALSE)
expect_equal(store(V1/V2),
V1R/V2R,
check.attributes=FALSE)
expect_equal(store(P1$FL/P1$FL),
P1$R/P1$R,
check.attributes=FALSE)
expect_equal(store(V1/P1$FL),
V1R/P1$R,
check.attributes=FALSE)
expect_equal(store(P1$FL/V2),
P1$R/V2R,
check.attributes=FALSE)
expect_equal(store(M1$FL/V2),
M1$R/V2R,
check.attributes=FALSE)
expect_equal(store(M1$FL/P1$FL),
M1$R/P1$R,
check.attributes=FALSE)
expect_equal(store(V1/M2),
V1R/M2R,
check.attributes=FALSE)
expect_equal(store(P1$FL/M2),
P1$R/M2R,
check.attributes=FALSE)
})
## Testing M_Multiplication
test_that("check result for M_Multiplication",
{
M1 <- initF.FLMatrix(n=5,isSquare=TRUE)
M2 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",5,"Matrix_id","ROW_ID","COL_ID","CELL_VAL")
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,10),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,10),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,isRowVec=TRUE)
expect_equal(M1$FL*M2,M1$R*M2R,check.attributes=FALSE)
expect_equal(V1*V2,V1R*V2R,check.attributes=FALSE)
expect_equal(P1$FL*P1$FL,P1$R*P1$R,check.attributes=FALSE)
expect_equal(V1*P1$FL,V1R*P1$R,check.attributes=FALSE)
expect_equal(P1$FL*V2,P1$R*V2R,check.attributes=FALSE)
expect_equal(M1$FL*V2,M1$R*V2R,check.attributes=FALSE)
expect_equal(M1$FL*P1$FL,M1$R*P1$R,check.attributes=FALSE)
expect_equal(V1*M2,V1R*M2R,check.attributes=FALSE)
expect_equal(P1$FL*M2,P1$R*M2R,check.attributes=FALSE)
expect_equal(P1$FL*P1$FL*V1*V2*M2*P1$FL*M1$FL*V2,
P1$R*P1$R*V1R*V2R*M2R*P1$R*M1$R*V2R,
check.attributes=FALSE)
})
## Testing M_Remainder
test_that("check result for M_Remainder",
{
M1 <- initF.FLMatrix(n=5,isSquare=TRUE)
M2 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",5,"Matrix_id","ROW_ID","COL_ID","CELL_VAL")
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,10),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,10),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,isRowVec=TRUE)
expect_equal(store(M1$FL%%M2),M1$R%%M2R,check.attributes=FALSE)
expect_equal(store(V1%%V2),V1R%%V2R,check.attributes=FALSE)
expect_equal(store(P1$FL%%P1$FL),P1$R%%P1$R,check.attributes=FALSE)
expect_equal(store(V1%%P1$FL),V1R%%P1$R,check.attributes=FALSE)
expect_equal(store(P1$FL%%V2),P1$R%%V2R,check.attributes=FALSE)
expect_equal(store(M1$FL%%V2),M1$R%%V2R,check.attributes=FALSE)
expect_equal(store(M1$FL%%P1$FL),M1$R%%P1$R,check.attributes=FALSE)
expect_equal(store(V1%%M2),V1R%%M2R,check.attributes=FALSE)
expect_equal(store(P1$FL%%M2),P1$R%%M2R,check.attributes=FALSE)
})
## Testing Equality
test_that("check result for M_Equality",
{
M1 <- initF.FLMatrix(n=5,isSquare=TRUE)
M2 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",5,"Matrix_id","ROW_ID","COL_ID","CELL_VAL")
M3 <- as.FLMatrix(as.matrix(M2),connection)
M3R <- as.matrix(M2)
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,10),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,10),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,isRowVec=TRUE)
expect_equal(M1$FL==M2,(M1$R==M2R),check.attributes=FALSE)
expect_equal(M1$FL==M1$FL,M1$R==M1$R,check.attributes=FALSE)
expect_equal(M2==M3,M2R==M3R,check.attributes=FALSE)
expect_equal(V1==V1R,V1R==V1R,check.attributes=FALSE)
expect_equal(P1$FL==P1$FL,P1$R==P1$R,check.attributes=FALSE)
expect_equal(V1==P1$FL,V1R==P1$R,check.attributes=FALSE)
expect_equal(P1$FL==P1$R,P1$R==P1$R,check.attributes=FALSE)
#expect_equal(M1$FL==V2,M1$R==V2R,check.attributes=FALSE)
#expect_equal(M1$FL==P1$FL,M1$R==P1$R,check.attributes=FALSE)
expect_equal(V1==V1,V1R==V1R,check.attributes=FALSE)
#expect_equal(P1$FL==M2,P1$R==M2R,check.attributes=FALSE)
})
## Testing FLIdentical
test_that("check result for identical",
{
M1 <- initF.FLMatrix(n=5,isSquare=TRUE)
M2 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",5,"Matrix_id","ROW_ID","COL_ID","CELL_VAL")
M3 <- as.FLMatrix(as.matrix(M2),connection)
M3R <- as.matrix(M2)
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,10),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,10),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,isRowVec=TRUE)
expect_equal(identical(M1$FL,M2),identical(M1$R,M2R),check.attributes=FALSE)
expect_equal(identical(M1$FL,M1$FL),identical(M1$R,M1$R),check.attributes=FALSE)
expect_equal(identical(M2,M3),identical(M2R,M3R),check.attributes=FALSE)
expect_equal(identical(V1,V1R),identical(V1R,V1R),check.attributes=FALSE)
expect_equal(identical(P1$FL,P1$FL),identical(P1$R,P1$R),check.attributes=FALSE)
expect_equal(identical(V1,P1$FL),identical(V1R,P1$R),check.attributes=FALSE)
expect_equal(identical(P1$FL,P1$R),identical(P1$R,P1$R),check.attributes=FALSE)
expect_equal(identical(M1$FL,V2),identical(M1$R,V2R),check.attributes=FALSE)
expect_equal(identical(M1$FL,P1$FL),identical(M1$R,P1$R),check.attributes=FALSE)
expect_equal(identical(V1,V1),identical(V1R,V1R),check.attributes=FALSE)
expect_equal(identical(P1$FL,M2),identical(P1$R,M2R),check.attributes=FALSE)
})
M1 <- initF.FLMatrix(n=5,isSquare=TRUE)
M2 <- FLMatrix(connection,
"FL_DEMO", "tblmatrixMulti",
5, "MATRIX_ID",
"ROW_ID","COL_ID","CELL_VAL")
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,10),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,10),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,isRowVec=TRUE)
V1+V2
V1R+V2R
t<-P1$FL+P1$FL
t
P1$R+P1$R
t<-V1+P1$FL
t
V1R+P1$R
t<-P1$FL+V2
t
P1$R+V2
P1$R+V2R
M1$FL+V2
M1$R+V2R
M1$FL+P1$FL
M1$R+P1$R
V1+M2
V1R+M2R
P1$FL+M2
P1$R+M2R
expect_equal(P1$FL+P1$FL+V1+V2+M2+P1$FL+M1$FL+V2,
P1$R+P1$R+V1R+V2R+M2R+P1$R+M1$R+V2R,
check.attributes=FALSE)
test_that("check result for M_Addition",
{
M1 <- initF.FLMatrix(n=5,isSquare=TRUE)
M2 <- FLMatrix(connection,
"FL_DEMO", "tblmatrixMulti",
5, "MATRIX_ID",
"ROW_ID","COL_ID","CELL_VAL")
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,10),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,10),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,isRowVec=TRUE)
expect_eval_equal(initF=function(n) {
a <- initF.FLMatrix(n=5,isSquare=TRUE)
b <- FLMatrix(connection,
"FL_DEMO", "tblmatrixMulti",
5, "MATRIX_ID",
"ROW_ID","COL_ID","CELL_VAL")
list(R=list(a$R,
as.matrix(b)),
FL=list(a$FL,
b))
},function(x) do.call("+",x),
function(x) do.call("+",x)
)
## gk: try refactoring in eval_equal function(x) do.call("+",x) == a+b
expect_equal(M1$FL+M2,
M1$R+M2R,
check.attributes=FALSE)
expect_equal(V1+V2,
V1R+V2R,
check.attributes=FALSE)
expect_equal(P1$FL+P1$FL,
P1$R+P1$R,
check.attributes=FALSE)
expect_equal(V1+P1$FL,
V1R+P1$R,
check.attributes=FALSE)
expect_equal(P1$FL+V2,
P1$R+V2R,
check.attributes=FALSE)
expect_equal(M1$FL+V2,
M1$R+V2R,
check.attributes=FALSE)
expect_equal(M1$FL+P1$FL,
M1$R+P1$R,
check.attributes=FALSE)
expect_equal(V1+M2,
V1R+M2R,
check.attributes=FALSE)
expect_equal(P1$FL+M2,
P1$R+M2R,
check.attributes=FALSE)
expect_equal(P1$FL+P1$FL+V1+V2+M2+P1$FL+M1$FL+V2,
P1$R+P1$R+V1R+V2R+M2R+P1$R+M1$R+V2R,
check.attributes=FALSE)
})
## Testing M_Division
test_that("check result for M_Division",
{
M1 <- initF.FLMatrix(n=5,
isSquare=TRUE)
M2 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",
5,"Matrix_id","ROW_ID","COL_ID","CELL_VAL")
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,
10),
connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,
10),
connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,
isRowVec=TRUE)
expect_equal(store(M1$FL/M2),
M1$R/M2R,
check.attributes=FALSE)
expect_equal(store(V1/V2),
V1R/V2R,
check.attributes=FALSE)
expect_equal(store(P1$FL/P1$FL),
P1$R/P1$R,
check.attributes=FALSE)
expect_equal(store(V1/P1$FL),
V1R/P1$R,
check.attributes=FALSE)
expect_equal(store(P1$FL/V2),
P1$R/V2R,
check.attributes=FALSE)
expect_equal(store(M1$FL/V2),
M1$R/V2R,
check.attributes=FALSE)
expect_equal(store(M1$FL/P1$FL),
M1$R/P1$R,
check.attributes=FALSE)
expect_equal(store(V1/M2),
V1R/M2R,
check.attributes=FALSE)
expect_equal(store(P1$FL/M2),
P1$R/M2R,
check.attributes=FALSE)
})
test_that("check result for M_Addition",
{
M1 <- initF.FLMatrix(n=5,isSquare=TRUE)
M2 <- FLMatrix(connection,
"FL_DEMO", "tblmatrixMulti",
5, "MATRIX_ID",
"ROW_ID","COL_ID","CELL_VAL")
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,10),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,10),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,isRowVec=TRUE)
expect_eval_equal(initF=function(n) {
a <- initF.FLMatrix(n=5,isSquare=TRUE)
b <- FLMatrix(connection,
"FL_DEMO", "tblmatrixMulti",
5, "MATRIX_ID",
"ROW_ID","COL_ID","CELL_VAL")
list(R=list(a$R,
as.matrix(b)),
FL=list(a$FL,
b))
},function(x) do.call("+",x),
function(x) do.call("+",x)
)
## gk: try refactoring in eval_equal function(x) do.call("+",x) == a+b
expect_equal(M1$FL+M2,
M1$R+M2R,
check.attributes=FALSE)
expect_equal(V1+V2,
V1R+V2R,
check.attributes=FALSE)
expect_equal(P1$FL+P1$FL,
P1$R+P1$R,
check.attributes=FALSE)
expect_equal(V1+P1$FL,
V1R+P1$R,
check.attributes=FALSE)
expect_equal(P1$FL+V2,
P1$R+V2R,
check.attributes=FALSE)
expect_equal(M1$FL+V2,
M1$R+V2R,
check.attributes=FALSE)
expect_equal(M1$FL+P1$FL,
M1$R+P1$R,
check.attributes=FALSE)
expect_equal(V1+M2,
V1R+M2R,
check.attributes=FALSE)
expect_equal(P1$FL+M2,
P1$R+M2R,
check.attributes=FALSE)
expect_equal(P1$FL+P1$FL+V1+V2+M2+P1$FL+M1$FL+V2,
P1$R+P1$R+V1R+V2R+M2R+P1$R+M1$R+V2R,
check.attributes=FALSE)
})
M1 <- initF.FLMatrix(n=5,isSquare=TRUE)
M2 <- FLMatrix(connection,
"FL_DEMO", "tblmatrixMulti",
5, "MATRIX_ID",
"ROW_ID","COL_ID","CELL_VAL")
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,10),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,10),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,isRowVec=TRUE)
expect_equal(P1$FL+P1$FL+V1+V2+M2+P1$FL+M1$FL+V2,
P1$R+P1$R+V1R+V2R+M2R+P1$R+M1$R+V2R,
check.attributes=FALSE)
test_that("check result for M_Subtraction",
{
M1 <- initF.FLMatrix(n=5,isSquare=TRUE)
M2 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",5,"MATRIX_ID","ROW_ID","COL_ID","CELL_VAL")
M2R <- as.matrix(M2)
V1 <- as.FLVector(sample(1:100,10),connection)
V1R <- as.vector(V1)
V2 <- as.FLVector(sample(1:100,10),connection)
V2R <- as.vector(V2)
P1 <- initF.FLVector(n=10,isRowVec=TRUE)
expect_equal(M1$FL-M2,M1$R-M2R,check.attributes=FALSE)
expect_equal(V1-V2,V1R-V2R,check.attributes=FALSE)
expect_equal(P1$FL-P1$FL,P1$R-P1$R,check.attributes=FALSE)
expect_equal(V1-P1$FL,V1R-P1$R,check.attributes=FALSE)
expect_equal(P1$FL-V2,P1$R-V2R,check.attributes=FALSE)
expect_equal((M1$FL-V2),M1$R-V2R,check.attributes=FALSE)
expect_equal((M1$FL-P1$FL),M1$R-P1$R,check.attributes=FALSE)
expect_equal((V1-M2),V1R-M2R,check.attributes=FALSE)
expect_equal((P1$FL-M2),P1$R-M2R,check.attributes=FALSE)
expect_equal((P1$FL-P1$FL-V1-V2-M2-P1$FL-M1$FL-V2),
P1$R-P1$R-V1R-V2R-M2R-P1$R-M1$R-V2R,
check.attributes=FALSE)
})
