pamx$isolation
?objective
??objective
??build
??swap
pamx$clusinfo
pamx$silinfo
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(10,0,0.5)),
cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
pamx <- pam(x, 2)
library(cluster)
x <- rbind(cbind(rnorm(10,0,0.5), rnorm(10,0,0.5)),
cbind(rnorm(15,5,0.5), rnorm(15,5,0.5)))
pamx <- pam(x, 2)
pamx
pamx$clusinfo
pamx$silinfo
pamx$diss
pamx$call
pamx$data
?lm
?datasets
library(help = "datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
?datasets
?"datasets-package"
exists("sqlQuery")
exists("det")
?UseMethod
length(pasteo("hai","lo"))
length(paste0("hai","lo"))
length(paste0(""))
length(paste0())
length()
length("")
cat("hai","lo")
?dbSendUpdate
??dbSendUpdate
?dbcommit
??dbcommit
?sapply
sapply(1:2,function(x)x*x)
lapply(1:2,function(x)x*x)
lapply(list(1:2,3:4),function(x)x*x)
sapply(list(1:2,3:4),function(x)x*x)
list(matrix_id=1,r_id=2)
is.null("")
is.null(c())
is.null(c(""))
is.null(/0)
is.null(\0)
is.null("\0")
is.null(NULL)
is.null("NULL")
is.null()
?tryCatch
tryCatch(stop("yo"),error=function(x)print("inside error"))
?odbcGetErrMsg
?sqlQuery
connection <- odbcConnect("Gandalf")
connection <- odbcConnect("Gandalf")
t<-sqlQuery(connection,"selectt * from tblMatrixMulti",errors = F)
t
t<-sqlQuery(connection,"select * from tblMatrixMulti",errors = F)
t
t<-sqlQuery(connection,"select * from tbMatrixMulti",errors = F)
t
sqlQuery(connection,"select * from tbMatrixMulti",errors = F)
sqlQuery(connection,"select * from tblMatrixMulti",errors = F)
odbcGetErrMsg(connection)
sqlQuery(connection,"select * from tbMatrixMulti",errors = F)
odbcGetErrMsg(connection)
sqlQuery(connection,"select * from tblMatrixMulti",errors = F)
odbcGetErrMsg(connection)
sqlQuery(connection,"select * from tbMatrixMulti",errors = T)
odbcGetErrMsg(connection)
sqlQuery(connection,"select * from tbMatrixMulti",errors = T)
odbcGetErrMsg(connection)
sqlQuery(connection,"select * from tbMatrixMulti",errors = T)
sqlQuery(connection,"select * from tbMatrixMulti",errors = F)
sqlQuery(connection,"select * from tblMatrixMulti",errors = F)
odbcGetErrMsg(connection)
class(connection)
sqlQuery(connection,"select -1",errors = F)
t<-sqlQuery(connection,"select -1",errors = F)
t
class(t)
t==-1
?sparsematrix
Matrix(matrix(c(1:3,0),2),sparse = T)
t<-Matrix(matrix(c(1:3,0),2),sparse = T)
mdeep<-Matrix::summary(t)
mdeep
nrow(mdeep)
t<-Matrix(matrix(c(1:3,0,0,0,1:3),3),sparse = T)
T
t
t<-Matrix(matrix(c(1:3,0,0,0,1:2,0),3),sparse = T)
mdeep<-Matrix::summary(t)
mdeep
t<-Matrix(matrix(1:4,2),sparse = T)
t
Matrix::summary(t)
?setMethod
install.packages("shiny")
??shiny
?setdiff
setiff(1:2,3:4)
setdiff(1:2,3:4)
a=1
a=1
det(matrix(1:25,5,5))
det(matrix(1:25,5,5))
1:25
matrix(1:25,5,5)
matrix(1:25,5,4)
salary <- c(18700000,14626720,14137500,13980000,12916666)
> position <- c("QB","QB","DE","QB","QB")
> team <- c("Colts","Patriots","Panthers","Bengals","Giants")
> name.last <- c("Manning","Brady","Pepper","Palmer","Manning")name.first <- c("Peyton","Tom","Julius","Carson","Eli")
salary <- c(18700000,14626720,14137500,13980000,12916666)position <- c("QB","QB","DE","QB","QB")
team <- c("Colts","Patriots","Panthers","Bengals","Giants")                      name.last <- c("Manning","Brady","Pepper","Palmer","Manning")                      name.first <- c("Peyton","Tom","Julius","Carson","Eli")
salary <- c(18700000,14626720,14137500,13980000,12916666)
position <- c("QB","QB","DE","QB","QB")
team <- c("Colts","Patriots","Panthers","Bengals","Giants")
name.last <- c("Manning","Brady","Pepper","Palmer","Manning")
name.first <- c("Peyton","Tom","Julius","Carson","Eli")
salary <- c(18700000,14626720,14137500,13980000,12916666)
position <- c("QB","QB","DE","QB","QB")
team <- c("Colts","Patriots","Panthers","Bengals","Giants")
name.last <- c("Manning","Brady","Pepper","Palmer","Manning")
name.first <- c("Peyton","Tom","Julius","Carson","Eli")
top.5.salaries <- data.frame(name.last,name.first,team,position,salary)
edit(top.5.salaries)
save(top.5.salaries,
file="C:Users/STPL/Downloads/top.5.salaries.rda")
save(top.5.salaries,
file="C:Users/STPL/Downloads")
save(top.5.salaries,
file="C:/Users/STPL/Downloads")
save(top.5.salaries,
file="D:/")
save(top.5.salaries,file="~/top.5.salaries.RData")
getwd()
load(~/top.5.salaries)
load("~/top.5.salaries")
load("~/top.5.salaries.RData")
load("~/top.5.salaries.RData")
write.table(top.5.salaries,"~/fromWrite.Table")
write.csv(top.5.salaries,"~/fromWrite.Table")
library(RJDBC)
read.table(top.5.salaries,"~/fromWrite.Table")
read.table(top.5.salaries,"fromWrite.Table")
read.table(top.5.salaries,"fromWrite")
read.table("~/fromWrite.Table")
?gsub
class(Matrix(1:4,2))
sqlstr0<-paste0("INSERT INTO ","tblName",
paste0(" SELECT ",max_vector_id_value,1:length(object),
object,collapse=","),";")
sqlstr0<-paste0("INSERT INTO ","tblName",
paste0(" SELECT ",100,1:4,
21:24,collapse=","),";")
paste0("INSERT INTO ","tblName",
paste0(" SELECT ",100,1:4,
21:24,collapse=","),";")
paste0("INSERT INTO ","tblName"," SELECT ","100",
paste0(1:4,","
21:24,collapse=";"))
paste0("INSERT INTO ","tblName"," SELECT ","100",
paste0(1:4,",",
21:24,collapse=";"))
apply(21:24,FUN=function(x)paste0("INSERT INTO ","tblName"," SELECT ","100",
paste0(1:4,",",
x,collapse=";")))
lapply(21:24,FUN=function(x)paste0("INSERT INTO ","tblName"," SELECT ","100",
paste0(1:4,",",
x,collapse=";")))
sapply(21:24,FUN=function(x){paste0("INSERT INTO ","tblName"," SELECT ","100",",",
i,",",x,collapse=";");i<-i+1;})
i<-0
sapply(21:24,FUN=function(x){paste0("INSERT INTO ","tblName"," SELECT ","100",",",
i,",",x,collapse=";");i<-i+1;})
i<-0
sapply(21:24,FUN=function(x){i=i+1;return(paste0("INSERT INTO ","tblName"," SELECT ","100",",",
i,",",x,collapse=";"))})
sapply(21:24,FUN=function(x){i=i+1;return(paste0("INSERT INTO ","tblName"," SELECT ","100",",",
i,",",x,";"))})
i<-0
sapply(21:24,FUN=function(x){i<-i+1;return(paste0("INSERT INTO ","tblName"," SELECT ","100",",",
i,",",x,";"))})
sapply(21:24,FUN=function(x){i<<-i+1;return(paste0("INSERT INTO ","tblName"," SELECT ","100",",",
i,",",x,";"))})
v<-21:24
sapply(1:4,FUN=function(x){i<<-i+1;return(paste0("INSERT INTO ","tblName"," SELECT ","100",",",
x,",",v[x],";"))})
paste(sapply(1:4,FUN=function(x){i<<-i+1;return(paste0("INSERT INTO ","tblName"," SELECT ","100",",",
x,",",v[x],";"))}),collapse = "\n")
m
m[2]
m[3]
as.vector(m)
M<-Matrix(1:4,2,sparse = T)
M
M<-Matrix(c(1:3,0),2,sparse = T)
M
M[4]
Matrix(diag(2),sparse = T)
?"dgTMatrix-class"
m <- Matrix(0+1:28, nrow = 4)
m[-3,c(2,4:5,7)] <- m[ 3, 1:4] <- m[1:3, 6] <- 0
(mT <- as(m, "dgTMatrix"))
mT
mT[3]
?"dsCMatrix-class"
mm <- Matrix(toeplitz(c(10, 0, 1, 0, 3)), sparse = TRUE)
mm
mm[4]
as.vector(mm)
d
as.matrix(d)
d[[1]]<-c("a","b")
d
as.matrix(d)
d[[1]]<-c(1,2)
is.numeric(d)
is.numeric(as.matrix(d))
d[[1]]<-c("a","b")
is.numeric(as.matrix(d))
matrix(1:4)
?agnes
??agnes
?cluster::agnes
?hclust
hc <- hclust(dist(USArrests), "ave")
plot(hc)
hc$merge
hc$height
hc$order
hc$labels
dist(USArrests)
nrow(USArrests)
col(USArrests)
ncol(USArrests)
colnames(USArrests)
dim(dist(USArrests))
dims(dist(USArrests))
dim(as.matrix((dist(USArrests)))
)
hc$merge
hc$height
hc$order
length(hc$order)
l<-list(a="hey",b=1:3)
l[a]
l["a"]
l[c("a","b")]
t<-l[c("a","b")]
class(t)
l[["a"]]
?gsub
l[["a"]]<-2
l
letters[1]
letters[3]
letters[30]
paste0("t",letters[30])
is.character(paste0("t",letters[30]))
length(paste0("t",letters[30]))
unlst(l)
unlist(l)
is.vector(unlist(l))
library(cluster)
?fanny
x <- rbind(cbind(rnorm(10, 0, 0.5), rnorm(10, 0, 0.5)),
cbind(rnorm(15, 5, 0.5), rnorm(15, 5, 0.5)),
cbind(rnorm( 3,3.2,0.5), rnorm( 3,3.2,0.5)))
fannyx <- fanny(x, 2)
summary(fannyx)
?svm
??svm
m<- matrix(1:4,2,dimnames = list(1:2,3:4))
rbind(m,m)
m<- matrix(1:4,2,dimnames = list(1:2,3:4))
t<-rbind(m,m)
dimnames(t)
matrix(runif(25,-30,30)
,5,5
,dimnames=list(letters[1:5],1:5))
setwd("C:/Users/STPL/Downloads/AdapteR")
devtools::load_all("AdapteR")
library(RJDBC)
devtools::load_all("AdapteR")
connection <- odbcConnect("Gandalf")
FLStartSession(connection)
m3 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",3,"Matrix_id","ROW_ID","COL_ID","CELL_VAL") #  Non-Square Matrix of dimension 4x5
t<-colMeans(m3)
t
t<-colMeans(as.matrix(m3))
t
length(m3)
devtools::load_all("AdapteR")
m4 <- FLMatrix(connection,"FL_DEMO","tblmatrixMulti",5,"Matrix_id","ROW_ID","COL_ID","CELL_VAL") # Symmetric non-singular matrix of dimension 5x5
t<-lu(m4)
t
expand(t)
test_that("check LU Decomposition",
{
m <- initF.FLMatrix(n=5)
expect_equal(AdapteR::expand(AdapteR::lu(m$FL)),
Matrix::expand(Matrix::lu(m$R)),check.attributes=FALSE)
})
expect_eval_equal <- function(initF,FLcomputationF,RcomputationF,benchmark=FALSE,...)
{
I <- initF(...)
expect_equal(FLcomputationF(I$FL),
RcomputationF(I$R),
check.attributes=FALSE)
}
expect_flequal <- function(a,b,...){
if(is.list(a))
for(i in 1:length(a))
expect_flequal(a[[i]],b[[i]],...)
expect_equal(a,b,...)
}
## Increase n for increasing length of FLVector.
## If isRowVec=TRUE, rowVector(one observation of all columns) is returned.
initF.FLVector <- function(n,isRowVec=FALSE)
{
sqlSendUpdate(connection,
c(paste0("DROP TABLE FL_DEMO.test_vectortable_AdapteR;"),
paste0("CREATE TABLE FL_DEMO.test_vectortable_AdapteR
AS(SELECT 1 AS VECTOR_ID,a.serialval AS VECTOR_INDEX,
CAST(RANDOM(0,100) AS FLOAT)AS VECTOR_VALUE
FROM FL_DEMO.fzzlserial a
WHERE a.serialval < ",ifelse(isRowVec,2,n+1),") WITH DATA ")))
table <- FLTable(connection,
"FL_DEMO",
"test_vectortable_AdapteR",
"VECTOR_INDEX",
whereconditions=paste0("FL_DEMO.test_vectortable_AdapteR.VECTOR_ID = 1")
)
if(isRowVec)
flv <- table[1,base::sample(c("VECTOR_VALUE","VECTOR_INDEX"),n,replace=TRUE)]
else
flv <- table[1:n,"VECTOR_VALUE"]
Rvector <- as.vector(flv)
return(list(FL=flv,R=Rvector))
}
## Increase the value of n to increase the dimensions of FLMatrix returned.
## Returns n*n or n*(n-1) based on isSquare.
initF.FLMatrix <- function(n,isSquare=FALSE)
{
sqlSendUpdate(connection,
c(paste0("DROP TABLE FL_DEMO.test_matrixtable_AdapteR;"),
paste0("CREATE TABLE FL_DEMO.test_matrixtable_AdapteR
AS(SELECT 1 AS MATRIX_ID,a.serialval AS ROW_ID,
b.serialval AS COL_ID,CAST(random(0,100) AS FLOAT)AS CELL_VAL
FROM FL_DEMO.fzzlserial a,FL_DEMO.fzzlserial b
WHERE a.serialval < ",n+1," and b.serialval < ",ifelse(isSquare,n+1,n),") WITH DATA ")))
flm <- FLMatrix(connection,
database          = "FL_DEMO",
matrix_table      = "test_matrixtable_AdapteR",
matrix_id_value   = 1,
matrix_id_colname = "Matrix_ID",
row_id_colname    = "Row_ID",
col_id_colname    = "Col_ID",
cell_val_colname  = "Cell_Val")
Rmatrix <- as.matrix(flm)
return(list(FL=flm,R=Rmatrix))
}
initF.FLTable <- function(rows,cols)
{
WideTable <- FLTable(connection,
"FL_DEMO",
"fzzlserial",
"serialval",
whereconditions=paste0("FL_DEMO.fzzlserial.serialval<100"))
return(WideTable[1:rows,base::sample(c("randval","serialval"),cols,replace=TRUE)])
}
setMethod("expect_equal",signature("FLMatrix","matrix"),
function(object,expected,...) expect_equal(as.matrix(object),expected,...))
setMethod("expect_equal",signature("FLMatrix","FLMatrix"),
function(object,expected,...) expect_equal(as.matrix(object),as.matrix(expected),...))
setMethod("expect_equal",signature("dgCMatrix","FLMatrix"),
function(object,expected,...) expect_equal(object,as.matrix(expected),...))
setMethod("expect_equal",signature("FLVector","vector"),
function(object,expected,...) expect_equal(as.vector(object),expected,...))
setMethod("expect_equal",signature("FLVector","FLVector"),
function(object,expected,...) expect_equal(as.vector(object),as.vector(expected),...))
setMethod("expect_equal",signature("matrix","matrix"),
function(object,expected,...) testthat::expect_equal(as.vector(object),as.vector(expected),...))
setMethod("expect_equal",signature("list","list"),
function(object,expected,...)
llply(names(object),
function(i)
expect_equal(object[[i]],expected[[i]],...)))
library(testthat)
expect_eval_equal <- function(initF,FLcomputationF,RcomputationF,benchmark=FALSE,...)
{
I <- initF(...)
expect_equal(FLcomputationF(I$FL),
RcomputationF(I$R),
check.attributes=FALSE)
}
expect_flequal <- function(a,b,...){
if(is.list(a))
for(i in 1:length(a))
expect_flequal(a[[i]],b[[i]],...)
expect_equal(a,b,...)
}
## Increase n for increasing length of FLVector.
## If isRowVec=TRUE, rowVector(one observation of all columns) is returned.
initF.FLVector <- function(n,isRowVec=FALSE)
{
sqlSendUpdate(connection,
c(paste0("DROP TABLE FL_DEMO.test_vectortable_AdapteR;"),
paste0("CREATE TABLE FL_DEMO.test_vectortable_AdapteR
AS(SELECT 1 AS VECTOR_ID,a.serialval AS VECTOR_INDEX,
CAST(RANDOM(0,100) AS FLOAT)AS VECTOR_VALUE
FROM FL_DEMO.fzzlserial a
WHERE a.serialval < ",ifelse(isRowVec,2,n+1),") WITH DATA ")))
table <- FLTable(connection,
"FL_DEMO",
"test_vectortable_AdapteR",
"VECTOR_INDEX",
whereconditions=paste0("FL_DEMO.test_vectortable_AdapteR.VECTOR_ID = 1")
)
if(isRowVec)
flv <- table[1,base::sample(c("VECTOR_VALUE","VECTOR_INDEX"),n,replace=TRUE)]
else
flv <- table[1:n,"VECTOR_VALUE"]
Rvector <- as.vector(flv)
return(list(FL=flv,R=Rvector))
}
## Increase the value of n to increase the dimensions of FLMatrix returned.
## Returns n*n or n*(n-1) based on isSquare.
initF.FLMatrix <- function(n,isSquare=FALSE)
{
sqlSendUpdate(connection,
c(paste0("DROP TABLE FL_DEMO.test_matrixtable_AdapteR;"),
paste0("CREATE TABLE FL_DEMO.test_matrixtable_AdapteR
AS(SELECT 1 AS MATRIX_ID,a.serialval AS ROW_ID,
b.serialval AS COL_ID,CAST(random(0,100) AS FLOAT)AS CELL_VAL
FROM FL_DEMO.fzzlserial a,FL_DEMO.fzzlserial b
WHERE a.serialval < ",n+1," and b.serialval < ",ifelse(isSquare,n+1,n),") WITH DATA ")))
flm <- FLMatrix(connection,
database          = "FL_DEMO",
matrix_table      = "test_matrixtable_AdapteR",
matrix_id_value   = 1,
matrix_id_colname = "Matrix_ID",
row_id_colname    = "Row_ID",
col_id_colname    = "Col_ID",
cell_val_colname  = "Cell_Val")
Rmatrix <- as.matrix(flm)
return(list(FL=flm,R=Rmatrix))
}
initF.FLTable <- function(rows,cols)
{
WideTable <- FLTable(connection,
"FL_DEMO",
"fzzlserial",
"serialval",
whereconditions=paste0("FL_DEMO.fzzlserial.serialval<100"))
return(WideTable[1:rows,base::sample(c("randval","serialval"),cols,replace=TRUE)])
}
setMethod("expect_equal",signature("FLMatrix","matrix"),
function(object,expected,...) expect_equal(as.matrix(object),expected,...))
setMethod("expect_equal",signature("FLMatrix","FLMatrix"),
function(object,expected,...) expect_equal(as.matrix(object),as.matrix(expected),...))
setMethod("expect_equal",signature("dgCMatrix","FLMatrix"),
function(object,expected,...) expect_equal(object,as.matrix(expected),...))
setMethod("expect_equal",signature("FLVector","vector"),
function(object,expected,...) expect_equal(as.vector(object),expected,...))
setMethod("expect_equal",signature("FLVector","FLVector"),
function(object,expected,...) expect_equal(as.vector(object),as.vector(expected),...))
setMethod("expect_equal",signature("matrix","matrix"),
function(object,expected,...) testthat::expect_equal(as.vector(object),as.vector(expected),...))
setMethod("expect_equal",signature("list","list"),
function(object,expected,...)
llply(names(object),
function(i)
expect_equal(object[[i]],expected[[i]],...)))
library(plyr)
library(RJDBC)
test_that("check LU Decomposition",
{
m <- initF.FLMatrix(n=5)
expect_equal(AdapteR::expand(AdapteR::lu(m$FL)),
Matrix::expand(Matrix::lu(m$R)),check.attributes=FALSE)
})
test_that("check FLGinv",
{
expect_eval_equal(initF.FLMatrix,
AdapteR::ginv,
MASS::ginv,
n=5)
})
devtools::load_all("AdapteR")
flm1<-as.FLMatrix(Matrix(1:25,5),connection)
devtools::load_all("AdapteR")
flm1<-as.FLMatrix(Matrix(1:25,5),connection)
flm1
paste0(flm1,collapse = "")
devtools::load_all("AdapteR")
flm1<-as.FLMatrix(Matrix(1:25,5),connection)
devtools::load_all("AdapteR")
flm1<-as.FLMatrix(Matrix(1:25,5),connection)
