devtools::load_all(".")
FLCholeskyDecomp <- function(input_matrix)
{
matrixIDValue   <- input_matrix@matrix_id_value;
rowID     ``	<- input_matrix@row_id;
columnID    	<- input_matrix@column_id;
cellValue  	 	<- input_matrix@cellValue;
matrixTable 	<- input_matrix@matrix_table;
outTable 		<- gen_out_matrix_table("CholeskyDecomp",matrixTable, matrixIDValue)
path        	<- "D:/R_Wrappers/RWrappers/trunk/SQL/FLCholeskyDecomp.sql";
stopifnot(file.exists(path));
sql 			<- readChar(path, nchar = file.info(path)$size);
sql 			<- sprintf(	sql,
outTable,
rowID,
columnID,
cellValue,
matrixTable,
toString(matrixIDValue));
sql 			<- gsub("[\r\n]", " ", sql);
connection  	<- input_matrix@ODBC_connection
sqlQuery(connection, sql, stringsAsFactors = FALSE);
retData = new(	"FLMatrix", ODBC_connection = connection,
database = input_matrix@database, matrix_table = outTable, matrix_id_value = matrixIDValue,
matrix_id = "OutputMatrixID", row_id = "OutputRowNum", column_id = "OutputColNum", cell_value = "OutputVal")
return(retData)
}
devtools::load_all(".")
?dir
ls()
devtools::load_all(".")
ls()
devtools::use_package("RODBC")
Authors@R: as.person(c(
"Mitul Mundra <mitul.mundra@fuzzyl.com> [aut, cre]",
"Rohit Gupta <rohit.gupta@fuzzyl.com> [aut]"
))
library(matrix)
install.packages("matrix")
Y
install.packages("Matrix")
library("Matrix")
?chol
?FLCholeskyDecomp
?chol
?FLCholeskyDecomp
?chol
?FLCholeskyDecomp
?FLCholeskyDecomp
?FLCholeskyDecomp
?FLCholeskyDecomp
?FLCholeskyDecomp
devtools::load_all(".")
?FLCholeskyDecomp
?FLCholeskyDecomp
?FLCholeskyDecomp
?chol
?FLCholeskyDecomp
?FLCholeskyDecomp
help(FLCholeskyDecomp)
?chol
help(FLCholeskyDecomp)
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?odbcConnect
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?odbcConnect
?FLMatrix
?chol
?colnames
?FLMatrix
?FLMatrix
?lm
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?lm
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLMatrix
?FLCholeskyDecomp
?FLCholeskyDecomp
devtools::load_all(".")
devtools::load_all(".")
?FLMatrixInv
?FLMatrixInv
?FLMatrixInv
?lu
library(Matrix)
?lu
?lm
?FLLUDecomp
?FLLUDecomp
?FLLUDecomp
?FLLUDecomp
?FLLUDecomp
?FLLUDecomp
?FLLUDecomp
?FLLUDecomp
?FLLUDecomp
?FLLUDecomp
?FLMatrix
?FLLUDecomp
?FLLUDecomp
?FLLUDecomp
?FLLUDecomp
?FLSVD
?FLSVD
?FLLUDecomp
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
library('roxygen2')
install.packages('RdUtils ')
install.packages('RdUtils')
library('base')
?Rdutils
??Rdutils
??Rd2pdf
library(Rdconv)
install.packages("Rdconv")
R CMD Rdconv
library('base::Rdconv')
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?FLSVD
?svd
?FLSVD
?FLSVD
?FLCholeskyDecomp
?FLCholeskyDecomp
?FLCholeskyDecomp
devtools::load_all(".")
?eigen
?FLEigen
?FLEigen
?FLFetchMatrix
browseVignettes()
browseVignettes("lm")
?lm
browseVignettes("stats")
browseVignettes("devtools")
browseVignettes("MASS")
browseVignettes("rpart")
devtools::use_vignette("FuzzyRVignette")
install.packages("rmarkdown")
devtools::use_vignette("FuzzyRVignette")
Sys.date()
Sys.Date()
?rmarkdown::html_vignette
?rmarkdown::pdf_vignette
?rmarkdown::pdf
browseVignettes("rpart")
browseVignettes("rpart")
devtools::load_all(".")
ls()
devtools::load_all(".")
?FLFetchMatrix
devtools::create()
devtools::create("RODBC")
getwd()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::install_github("rstudio/rmarkdown")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(FuzzyRMatrix)
library(FuzzyRMatrix)
browseVignettes("FuzzyRMatrix")
library(FuzzyRMatrix)
library(FuzzyRMatrix)
browseVignettes("FuzzyRMatrix")
library(FuzzyRMatrix)
devtools::load_all(".")
library(FuzzyRMatrix)
library(FuzzyRMatrix)
library(FuzzyRMatrix)
install_github("devtools", "hadley")
library(devtools)
install_github("devtools", "hadley")
install_github("hadley/devtools")
library(FuzzyRMatrix)
library("FuzzyRMatrix", lib.loc="~/R/win-library/3.1")
library("RODBC", lib.loc="~/R/win-library/3.1")
devtools::load_all(".")
library(devtools)
devtools::build()
devtools::check(cleanup = FALSE)
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
?FLEigen
library(RODBC)
connection      <- odbcConnect("Gandalf");
database        <- "FL_R_WRAP";
matrix_table    <- "tblMatrixMulti";
matrix_id_value <- 5;
devtools::build()
devtools::load_all(".")
devtools::build()
FLEigen
devtools::load_all(".")
FLEigen
devtools::load_all(".")
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::check(cleanup = FALSE)
?nchars
??nchars
devtools::load_all(".")
devtools::build()
devtools::check(cleanup = FALSE)
devtools::load_all(".")
devtools::build()
devtools::check(cleanup = FALSE)
devtools::load_all(".")
devtools::build()
devtools::check(cleanup = FALSE)
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
devtools::load_all(".")
devtools::build()
?FLSVD
devtools::load_all(".")
devtools::build()
getwd()
getwd("D:/R_Wrappers/RWrappers/trunk")
setwd("D:/R_Wrappers/RWrappers/trunk")
getwd()
devtools::create("FuzzyR")
devtools::load_all(".")
?FLMatrix
devtools::load_all(".")
devtools::load_all(".")
?FLEigen
connection      <- odbcConnect("Gandalf")
\
;
;
sifgisjvgopsj\
v
devtools::load_all(".")
connection      <- odbcConnect("Gandalf")
database        <- "FL_R_WRAP";
matrix_table    <- "tblMatrixMulti";
matrix_id_value <- 5;
in_matrix       <- FLMatrix(connection, database, matrix_table, matrix_id_value,
matrix_id = "Matrix_ID", row_id = "Row_ID", column_id = "Col_ID",
cell_value = "Cell_Val")
inverted <- FLMatrixInv(in_matrix)
FLFetchMatrix(inverted)
result <- FLEigen(inverted)
?devtools::check
?devtools
??devtools
